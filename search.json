[{"path":[]},{"path":"https://davidcarslaw.github.io/openairmaps/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, colour, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behaviour contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behaviour include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement davison.jack.jd@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behaviour deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behaviour inappropriate. public apology may requested.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behaviour. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behaviour. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to openairmaps","title":"Contributing to openairmaps","text":"outlines propose change openairmaps.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to openairmaps","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to openairmaps","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to openairmaps","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"davidcarslaw/openairmaps\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header).","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to openairmaps","text":"Care taken new code follows style similar rest openair openairmaps. user-facing example exported functions written “lowerCamelCase” (.e., polarMap() rather polar_map()). use roxygen2, Markdown syntax, documentation.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to openairmaps","text":"Please note openairmaps project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://davidcarslaw.github.io/openairmaps/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://davidcarslaw.github.io/openairmaps/articles/openairmaps.html","id":"acess-uk-monitoring-data-with-latlng-information","dir":"Articles","previous_headings":"","what":"Acess UK Monitoring Data with Lat/Lng Information","title":"Examples of {openairmaps} Functionality","text":"openair::importUKAQ() meta argument appends latitude longitude site returned data. using data importUKAQ(), ensure data coordinate data appended similar way. find sites import data , can visualise UK monitoring networks using networkMap(). Alternatively, searchNetwork() allow target specific region.","code":"london_data <-   openair::importUKAQ(site = c(\"my1\", \"hors\", \"cll2\"),                       year = 2020,                       meta = TRUE)  london_data #> # A tibble: 26,352 × 22 #>    source site     code  date                  nox   no2    no    o3   so2  pm10 #>    <chr>  <chr>    <chr> <dttm>              <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1 aurn   London … CLL2  2020-01-01 00:00:00  61.9  40.0 14.3   1.33 1.21   44.9 #>  2 aurn   London … CLL2  2020-01-01 01:00:00  62.3  37.9 15.9   1.60 1.73   48.5 #>  3 aurn   London … CLL2  2020-01-01 02:00:00  68.7  37.2 20.5   2.00 1.23   49.1 #>  4 aurn   London … CLL2  2020-01-01 03:00:00  60.2  36.5 15.5   2.05 1.23   53.1 #>  5 aurn   London … CLL2  2020-01-01 04:00:00  34.9  28.2  4.32  7.58 1.23   46.3 #>  6 aurn   London … CLL2  2020-01-01 05:00:00  32.4  27.7  3.06  7.33 0.844  43.7 #>  7 aurn   London … CLL2  2020-01-01 06:00:00  35.8  29.9  3.84  6.64 1.23   46.1 #>  8 aurn   London … CLL2  2020-01-01 07:00:00  46.3  36.2  6.60  4.29 1.23   42.7 #>  9 aurn   London … CLL2  2020-01-01 08:00:00 116.   40.6 49.1   1.70 2.66   42.8 #> 10 aurn   London … CLL2  2020-01-01 09:00:00 127.   41.6 55.5   2.05 3.18   42.1 #> # ℹ 26,342 more rows #> # ℹ 12 more variables: pm2.5 <dbl>, v10 <dbl>, v2.5 <dbl>, nv10 <dbl>, #> #   nv2.5 <dbl>, ws <dbl>, wd <dbl>, air_temp <dbl>, co <dbl>, latitude <dbl>, #> #   longitude <dbl>, site_type <chr>  names(london_data) #>  [1] \"source\"    \"site\"      \"code\"      \"date\"      \"nox\"       \"no2\"       #>  [7] \"no\"        \"o3\"        \"so2\"       \"pm10\"      \"pm2.5\"     \"v10\"       #> [13] \"v2.5\"      \"nv10\"      \"nv2.5\"     \"ws\"        \"wd\"        \"air_temp\"  #> [19] \"co\"        \"latitude\"  \"longitude\" \"site_type\" networkMap(source = c(\"aurn\", \"aqe\"),            year = 2020,            control = \"variable\")"},{"path":"https://davidcarslaw.github.io/openairmaps/articles/openairmaps.html","id":"polar-plot-maps","dir":"Articles","previous_headings":"","what":"Polar Plot Maps","title":"Examples of {openairmaps} Functionality","text":"polarMap() family includes polarMap(), annulusMap(), freqMap(), percentileMap(), windroseMap(), pollroseMap(), diffMap(), work similarly create interactive air quality maps: setting static TRUE recieve static version map, may useful academic articles.","code":"polarMap(london_data,          c(\"no2\", \"pm10\"),           popup = c(\"site\", \"site_type\"),          label = \"site\") polarMap(london_data,          c(\"no2\", \"pm10\"),          static = TRUE,          d.icon = 100)"},{"path":"https://davidcarslaw.github.io/openairmaps/articles/openairmaps.html","id":"trajectory-maps","dir":"Articles","previous_headings":"","what":"Trajectory Maps","title":"Examples of {openairmaps} Functionality","text":"trajMap() almost identical arguments openair::trajPlot(), likewise trajLevelMap() openair::trajLevel().","code":"trajMap(traj_data, colour = \"pm10\") trajLevelMap(traj_data)"},{"path":"https://davidcarslaw.github.io/openairmaps/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jack Davison. Maintainer, author. David Carslaw. Author.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Davison J, Carslaw D (2024). openairmaps: Create Maps Air Pollution Data. R package version 0.9.0.9006, https://github.com/davidcarslaw/openairmaps, https://davidcarslaw.github.io/openairmaps/.","code":"@Manual{,   title = {openairmaps: Create Maps of Air Pollution Data},   author = {Jack Davison and David Carslaw},   year = {2024},   note = {R package version 0.9.0.9006,     https://github.com/davidcarslaw/openairmaps},   url = {https://davidcarslaw.github.io/openairmaps/}, }"},{"path":[]},{"path":[]},{"path":"https://davidcarslaw.github.io/openairmaps/index.html","id":"id_-core-features","dir":"","previous_headings":"","what":"💡 Core Features","title":"Create Maps of Air Pollution Data","text":"openairmaps developed pace align openair R’s modern geospatial ecosystem. Network visualisation many UK-based monitoring networks networkMap(), can also searched using searchNetwork(). Directional analysis maps place openair::polarPlot() “polar coordinate” plots maps. Trajectory analysis maps (trajMap() trajLevelMap()) interactive implementations openair::trajPlot() family. Flexible map conditioning aligned openair type option easily condition maps season, day week, . Map building utilities building popups interactive maps, formatting common pollutant names units, converting UK postcodes lat/lng coordinates.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/index.html","id":"id_-documentation","dir":"","previous_headings":"","what":"📖 Documentation","title":"Create Maps of Air Pollution Data","text":"openairmaps functions fully documented; access documentation using R IDE choice. Documentation also hosted online package website.  guide openair toolkit can found online book, contains lots code snippets, demonstrations functionality, ideas application openair’s various functions.","code":"?openairmaps::polarMap"},{"path":"https://davidcarslaw.github.io/openairmaps/index.html","id":"id_️-installation","dir":"","previous_headings":"","what":"🗃️ Installation","title":"Create Maps of Air Pollution Data","text":"openairmaps can installed CRAN : can also install development version openairmaps GitHub using pak: 🏛️ openairmaps primarily maintained Jack Davison. 📃 openairmaps licensed GNU General Public License. 🧑‍💻 Contributions welcome wider community. See contributing guide code conduct information.","code":"install.packages(\"openairmaps\") # install.packages(\"pak\") pak::pak(\"davidcarslaw/openairmaps\")"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/addPolarMarkers.html","id":null,"dir":"Reference","previous_headings":"","what":"Add polar markers to leaflet map — addPolarMarkers","title":"Add polar markers to leaflet map — addPolarMarkers","text":"function similar (identical ) leaflet::addMarkers() leaflet::addCircleMarkers() functions leaflet, allows users add openair directional analysis plots leaflet map control groups layerIds \"--one\" functions like polarMap().","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/addPolarMarkers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add polar markers to leaflet map — addPolarMarkers","text":"","code":"addPolarMarkers(   map,   pollutant,   fun = openair::polarPlot,   lng = NULL,   lat = NULL,   layerId = NULL,   group = NULL,   popup = NULL,   popupOptions = NULL,   label = NULL,   labelOptions = NULL,   options = leaflet::markerOptions(),   clusterOptions = NULL,   clusterId = NULL,   key = FALSE,   d.icon = 200,   d.fig = 3.5,   data = leaflet::getMapData(map),   ... )  addPolarDiffMarkers(   map,   pollutant,   before = leaflet::getMapData(map),   after = leaflet::getMapData(map),   lng = NULL,   lat = NULL,   layerId = NULL,   group = NULL,   popup = NULL,   popupOptions = NULL,   label = NULL,   labelOptions = NULL,   options = leaflet::markerOptions(),   clusterOptions = NULL,   clusterId = NULL,   key = FALSE,   d.icon = 200,   d.fig = 3.5,   ... )"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/addPolarMarkers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add polar markers to leaflet map — addPolarMarkers","text":"map map widget object created leaflet() pollutant name pollutant plot. Note , fun = openair::windRose, must set pollutant = \"ws\". fun openair directional analysis plotting function. Supported functions include openair::polarPlot() (default), openair::polarAnnulus(), openair::polarFreq(), openair::percentileRose(), openair::pollutionRose() openair::windRose(). openair::polarDiff(), use addPolarDiffMarkers(). lng decimal longitude. lat decimal latitude. layerId layer id group name group newly created layers belong (clearGroup addLayersControl purposes). Human-friendly group names permitted–need short, identifier-style names. number layers even different types layers (e.g. markers polygons) can share group name. popup column data used popup. popupOptions Vector popupOptions provide popups label column data used label. labelOptions Vector labelOptions provide label options label. Default NULL options list extra options tile layers, popups, paths (circles, rectangles, polygons, ...), map elements clusterOptions NULL, markers clustered using Leaflet.markercluster;  can use markerClusterOptions() specify marker cluster options clusterId id marker cluster layer key key marker drawn? Default FALSE. d.icon diameter plot map pixels. affect size individual polar markers. Alternatively, vector form c(width, height) can provided non-circular marker desired. d.fig diameter plots produced using openair inches. affect resolution markers map. Alternatively, vector form c(width, height) can provided non-circular marker desired. data data frame. data frame must contain data plot choice openair directional analysis plot, includes wind speed (ws), wind direction (wd), column representing concentration pollutant. addition, data must include decimal latitude longitude. default, data object provided leaflet::leaflet() initially, can overridden. ... arguments plotting function (e.g. period openair::polarAnnulus()). , data frame represents /case. See openair::polarPlot() details different input requirements. default, data object provided leaflet::leaflet() initially, least one overridden.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/addPolarMarkers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add polar markers to leaflet map — addPolarMarkers","text":"leaflet object.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/addPolarMarkers.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Add polar markers to leaflet map — addPolarMarkers","text":"addPolarMarkers(): Add one-table polar marker (e.g., openair::polarPlot()) addPolarDiffMarkers(): Add two-table openair::polarDiff() marker.","code":""},{"path":[]},{"path":"https://davidcarslaw.github.io/openairmaps/reference/addPolarMarkers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add polar markers to leaflet map — addPolarMarkers","text":"","code":"if (FALSE) { # \\dontrun{ library(leaflet) library(openair)  # different types of polar plot on one map leaflet(data = polar_data) %>%   addTiles() %>%   addPolarMarkers(\"ws\",     fun = openair::windRose,     group = \"Wind Rose\"   ) %>%   addPolarMarkers(\"nox\",     fun = openair::polarPlot,     group = \"Polar Plot\"   ) %>%   addLayersControl(     baseGroups = c(\"Wind Rose\", \"Polar Plot\")   )  # use of polar diff (NB: both 'before' and 'after' inherit from `leaflet()`, # so at least one should be overridden - in this case 'after') leaflet(data = polar_data) %>%   addTiles() %>%   addPolarDiffMarkers(\"nox\",     after = dplyr::mutate(polar_data, nox = jitter(nox, 5))   ) } # }"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/addTrajPaths.html","id":null,"dir":"Reference","previous_headings":"","what":"Add trajectory paths to leaflet map — addTrajPaths","title":"Add trajectory paths to leaflet map — addTrajPaths","text":"function similar (identical ) leaflet::addMarkers() function leaflet, allows users add trajectory paths leaflet map control groups layerIds \"--one\" functions like trajMap().","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/addTrajPaths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add trajectory paths to leaflet map — addTrajPaths","text":"","code":"addTrajPaths(   map,   lng = \"lon\",   lat = \"lat\",   layerId = NULL,   group = NULL,   data = leaflet::getMapData(map),   npoints = 12,   ... )"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/addTrajPaths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add trajectory paths to leaflet map — addTrajPaths","text":"map map widget object created leaflet::leaflet(). lng decimal longitude. lat decimal latitude. layerId base string layer id. actual layer IDs format \"layerId-linenum\" lines \"layerId_linenum-pointnum\" points. example, first point first trajectory path \"layerId-1-1\". group name group newly created layers belong (leaflet::clearGroup() leaflet::addLayersControl() purposes). Human-friendly group names permitted–need short, identifier-style names. number layers even different types layers (e.g. markers polygons) can share group name. data Data frame, result importing trajectory file using openair::importTraj(). default, data object provided leaflet::leaflet() initially, can overridden. npoints dot placed every npoints along full trajectory. hourly back trajectories points plotted every npoints hours. helps understand air masses particular times get feel speed air (points closer together correspond slower moving air masses). Defaults 12. ... arguments pass leaflet::addCircleMarkers() leaflet::addPolylines(). use color argument, important ensure vector supply length one avoid issues leaflet::addPolylines() (.e., use color = ~ pal(nox)[1]). Note opacity controls opacity lines fillOpacity opacity markers.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/addTrajPaths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add trajectory paths to leaflet map — addTrajPaths","text":"leaflet object.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/addTrajPaths.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add trajectory paths to leaflet map — addTrajPaths","text":"addTrajPaths() can powerful way quickly plotting trajectories leaflet map, users take care due additional arguments passed leaflet::addCircleMarkers() leaflet::addPolylines(). particular, users weary use color argument. Specifically, color passed vector length greater one, multiple polylines drawn top one another. best affect opacity, worst significantly impact performance R final leaflet map. mitigate , please ensure vector passed color length one. simple want whole path colour, difficult want colour pollutant, example. easiest way achieve write loop use another iterative approach (e.g. purrr package) add one path per arrival date. example provided Examples.","code":""},{"path":[]},{"path":"https://davidcarslaw.github.io/openairmaps/reference/addTrajPaths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add trajectory paths to leaflet map — addTrajPaths","text":"","code":"if (FALSE) { # \\dontrun{ library(leaflet) library(openairmaps)  pal <- colorNumeric(palette = \"viridis\", domain = traj_data$nox)  map <- leaflet() %>%   addTiles()  for (i in seq(length(unique(traj_data$date)))) {   data <- dplyr::filter(traj_data, date == unique(traj_data$date)[i])    map <- map %>%     addTrajPaths(       data = data,       color = pal(data$nox)[1]     ) }  map } # }"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/annulusMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Polar annulus plots on dynamic and static maps — annulusMap","title":"Polar annulus plots on dynamic and static maps — annulusMap","text":"annulusMap() function creates map using polar annulus plots markers. number pollutants can specified using pollutant argument, multiple layers markers can created using type. default, maps dynamic can panned, zoomed, otherwise interacted . Using static argument allows static images produced instead.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/annulusMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Polar annulus plots on dynamic and static maps — annulusMap","text":"","code":"annulusMap(   data,   pollutant = NULL,   period = \"hour\",   limits = \"free\",   latitude = NULL,   longitude = NULL,   crs = 4326,   type = NULL,   popup = NULL,   label = NULL,   provider = \"OpenStreetMap\",   cols = \"turbo\",   alpha = 1,   key = FALSE,   legend = TRUE,   legend.position = NULL,   legend.title = NULL,   legend.title.autotext = TRUE,   control.collapsed = FALSE,   control.position = \"topright\",   control.autotext = TRUE,   d.icon = 200,   d.fig = 3.5,   static = FALSE,   static.nrow = NULL,   progress = TRUE,   ...,   control = NULL )"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/annulusMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Polar annulus plots on dynamic and static maps — annulusMap","text":"data Input data table pollutant, wind, geo-spatial information. required | scope: dynamic & static data frame. data frame must contain data plot directional analysis marker, includes wind speed (ws), wind direction (wd), column representing concentration pollutant. addition, data must include decimal latitude longitude (X/Y coordinate used conjunction crs). pollutant Pollutant name(s). required | scope: dynamic & static column name(s) pollutant(s) plot. multiple pollutants specified non-pairwise statistic supplied, type argument longer able used : Dynamic: pollutants can toggled using \"layer control\" menu. Static:: pollutants appear different panel. Multiple pollutants prohibit use type argument non-pairwise statistics. period Temporal period radial axis. default: \"hour\" | scope: dynamic & static Options \"hour\" (default, plot diurnal variations), \"season\" plot variation throughout year, \"weekday\" plot day week variation \"trend\" plot trend wind direction. limits Specifier plot colour scale bounds. default: \"free\" | scope: dynamic & static One : \"fixed\" ensures markers use colour scale. \"free\" (default) allows markers use different colour scales. numeric vector form c(lower, upper) used define colour scale. example, limits = c(0, 100) force plot limits span 0-100. latitude, longitude decimal latitude(Y)/longitude(X). default: NULL | scope: dynamic & static Column names representing decimal latitude longitude (Y/X coordinate using different crs). provided, automatically inferred data looking column named \"lat\"/\"latitude\" \"lon\"/\"lng\"/\"long\"/\"longitude\" (case-insensitively). crs coordinate reference system (CRS). default: 4326 | scope: dynamic & static coordinate reference system (CRS) data, passed sf::st_crs(). default EPSG:4326, CRS associated commonly used latitude longitude coordinates. Different coordinate systems can specified using crs (e.g., crs = 27700 British National Grid). Note non-lat/lng coordinate systems re-projected EPSG:4326 plotting map. type method condition data separate plotting. default: NULL | scope: dynamic & static Used splitting input data different groups, passed type argument openair::cutData(). type specified: Dynamic: different data splits can toggled using \"layer control\" menu. Static:: data splits appear different panel. type used multiple pollutant columns provided. popup Content marker popups dynamic maps. default: NULL | scope: dynamic Columns used HTML content marker popups dynamic maps. Popups may useful show information individual sites (e.g., site names, codes, types, etc.). vector column names provided passed buildPopup() using default values. label Content marker hover-dynamic maps. default: NULL | scope: dynamic Column used HTML content hover-labels. Labels useful reasons popups, though typically shorter. provider basemap(s) used. default: \"OpenStreetMap\" | scope: dynamic & static base map(s) used beneath polar markers. provided, default \"OpenStreetMap\"/\"osm\" dynamic static maps. Dynamic: number leaflet::providers. See http://leaflet-extras.github.io/leaflet-providers/preview/ list base maps can used. multiple base maps provided, can toggled using \"layer control\" interface. default, interface use provider names labels, users can define using named vector (e.g., c(\"Default\" = \"OpenStreetMap\", \"Satellite\"   = \"Esri.WorldImagery\")) Static: One rosm::osm.types(). overlap static dynamic providers. example, {ggspatial} uses \"osm\" specify \"OpenStreetMap\". static providers provided dynamic maps vice versa, {openairmaps} attempt substitute correct provider string. cols Colours use plotting. default: \"turbo\" | scope: dynamic & static colours used plotting, passed openair::openColours(). default, \"turbo\", rainbow palette relatively perceptually uniform colours. Read palette https://research.google/blog/turbo--improved-rainbow-colormap--visualization/. alpha Transparency value polar markers. default: 1 | scope: dynamic & static value 0 (fully transparent) 1 (fully opaque). key Draw individual marker legends? default: FALSE | scope: dynamic & static Draw key individual marker? Potentially useful limits = \"free\", limited use otherwise. legend Draw shared legend? default: TRUE | scope: dynamic & static markers share colour scale (e.g., limits != \"free\" polarMap()), shared legend created side map? legend.position Position shared legend. default: NULL | scope: dynamic & static legend = TRUE, legend placed? Dynamic: One \"topright\", \"topright\", \"bottomleft\" \"bottomright\". Passed position argument leaflet::addLegend(). Static:: One \"top\", \"right\", \"bottom\" \"left\". Passed legend.position argument ggplot2::theme(). legend.title Title legend. default: NULL | scope: dynamic & static default, legend.title = NULL, function attempt provide sensible legend title. legend.title allows users overwrite - example, include units contextual information. dynamic maps, users may wish use HTML tags format title. legend.title.autotext Automatically format title legend? default: TRUE | scope: dynamic & static legend.title.autotext = TRUE, legend.title first run quickTextHTML() (dynamic) openair::quickText() (static). control.collapsed Show layer control collapsed? default: FALSE | scope: dynamic dynamic maps, \"layer control\" interface collapsed? TRUE, users hover icon view options. control.position Position layer control menu default: \"topright\" | scope: dynamic type != NULL, multiple pollutants specified, \"layer control\" interface placed? One \"topleft\", \"topright\", \"bottomleft\" \"bottomright\". Passed position argument leaflet::addLayersControl(). control.autotext Automatically format content layer control menu? default: TRUE | scope: dynamic control.autotext = TRUE, content \"layer control\" interface first run quickTextHTML(). d.icon diameter plot map pixels. default: 200 | scope: dynamic & static affect size individual polar markers. Alternatively, vector form c(width, height) can provided non-circular marker desired. d.fig diameter plots produced using {openair} inches. default: 3.5 | scope: dynamic & static affect resolution markers map. Alternatively, vector form c(width, height) can provided non-circular marker desired. static Produce static map? default: FALSE controls whether dynamic static map produced. former default broadly useful, latter may preferable DOCX PDF outputs (e.g., academic papers). static.nrow Number rows static map. default: NULL | scope: static Controls number rows panels static map multiple pollutants type specified; passed nrow argument ggplot2::facet_wrap(). default, NULL, results roughly square grid panels. progress Show progress bar? default: TRUE | scope: dynamic & static default, progress bar shown visualise function's progress creating individual polar markers. option allows turned , desired. ... Arguments passed openair::polarAnnulus resolution Two plot resolutions can set: “normal” “fine” (default). local.tz results calculated local time includes treatment daylight savings time (DST)? default consider DST issues, provided data imported without DST offset. Emissions activity tends occur local time e.g. rush hour 8 every day. clocks go forward spring, emissions effectively released atmosphere typically 1 hour earlier summertime .e. DST applies. plotting diurnal profiles, effect “smearing-” concentrations. Sometimes, useful approach express time local time. correction tends produce better-defined diurnal profiles concentration (variables) allows better comparison made emissions/activity data. set FALSE GMT used. Examples usage include local.tz   = \"Europe/London\", local.tz = \"America/New_York\". See cutData import details. statistic statistic applied wind speed/direction bin. Can “mean” (default), “median”, “max” (maximum), “frequency”. “stdev” (standard deviation), “weighted.mean” “cpf” (Conditional Probability Function). smoothing involved, colour scale statistics provide indication overall pattern interpreted concentration units e.g. statistic =   \"weighted.mean\" bin mean multiplied bin frequency divided total frequency. many cases using polarFreq better. Setting statistic = \"weighted.mean\" can useful provides indication concentration * frequency occurrence highlight wind speed/direction conditions dominate overall mean. percentile statistic = \"percentile\" statistic =   \"cpf\" percentile used, expressed 0 100. Note percentile value calculated wind speed, wind direction ‘bins’. reason can also useful set min.bin ensure sufficient number points available estimate percentile. See quantile details percentiles calculated. width width annulus; can “normal” (default), “thin” “fat”. min.bin minimum number points allowed wind speed/wind direction bin.  default 1. value two requires least 2 valid records bin ; bins less 2 valid records set NA. Care taken using value > 1 risk removing real data points. recommended consider data care. Also, polarFreq function can use circumstances. exclude.missing Setting option TRUE (default) removes points plot far original data. smoothing routines produce predictions points data exist .e. predict. removing points far original data produces plot clear original data lie. set FALSE missing data interpolated. date.pad type = \"trend\" (default), date.pad = TRUE pad-missing data beginning first year end last year. purpose ensure trend plot begins ends beginning end year. force.positive default TRUE. Sometimes smoothing data steep gradients possible predicted values negative. force.positive = TRUE ensures predictions remain positive. useful several reasons. First, lots missing data interpolation needed can result artefacts predictions far original data. Second, known beforehand data positive, option carries assumption prediction. likely time setting force.positive = FALSE background concentrations first subtracted resulting data legitimately negative. vast majority situations expected user need alter default option. k smoothing value supplied gam temporal wind direction components, respectively. cases e.g. trend plot less 1-year data smoothing default values may become noisy affected outliers. Choosing lower value k (say 10) may help produce better plot. normalise TRUE concentrations normalised dividing mean value. done fitting smooth surface. option particularly useful one interested patterns concentrations several pollutants different scales e.g. NOx CO. Often useful one pollutant chosen. key.header Adds additional text/labels scale key. example, passing options key.header = \"header\", key.footer = \"footer1\" adds addition text scale key. arguments passed drawOpenKey via quickText, applying auto.text argument, handle formatting. key.footer see key.footer. key.position Location scale key plotted. Allowed arguments currently include \"top\", \"right\", \"bottom\" \"left\". auto.text Either TRUE (default) FALSE. TRUE titles axis labels automatically try format pollutant names units properly e.g.  subscripting `2' NO2. control Deprecated. Please use type.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/annulusMap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Polar annulus plots on dynamic and static maps — annulusMap","text":"Either: Dynamic: leaflet object Static: ggplot2 object using ggplot2::coord_sf() coordinates ggspatial basemap","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/annulusMap.html","id":"customisation-of-static-maps-using-ggplot-","dir":"Reference","previous_headings":"","what":"Customisation of static maps using ggplot2","title":"Polar annulus plots on dynamic and static maps — annulusMap","text":"outputs static directional analysis functions ggplot2 figures, customisation possible using functions ggplot2::theme(), ggplot2::guides() ggplot2::labs(). multiple pollutants specified, subscripting (e.g., \"x\" \"NOx\") achieved using ggtext package. Therefore choose override plot theme, recommended use [ggplot2::theme()] [ggtext::element_markdown()] define strip.text parameter. arguments like limits, percentile breaks defined, legend automatically added figure. Legends can removed using ggplot2::theme(legend.position = \"none\"), customised using ggplot2::guides() either color = ggplot2::guide_colourbar() continuous legends fill = ggplot2::guide_legend() discrete legends.","code":""},{"path":[]},{"path":"https://davidcarslaw.github.io/openairmaps/reference/annulusMap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Polar annulus plots on dynamic and static maps — annulusMap","text":"","code":"if (FALSE) { # \\dontrun{ annulusMap(polar_data,   pollutant = \"nox\",   period = \"hour\",   provider = \"CartoDB.Voyager\" ) } # }"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/buildPopup.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a Complex Popup for a Leaflet Map — buildPopup","title":"Build a Complex Popup for a Leaflet Map — buildPopup","text":"Group dataframe together latitude/longitude columns create HTML popup user-defined columns. default, unique values character columns collapsed comma-separated lists, numeric columns averaged, date columns presented range. function returns input dataframe appended \"popup\" column, can used popup argument function like polarMap().","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/buildPopup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a Complex Popup for a Leaflet Map — buildPopup","text":"","code":"buildPopup(   data,   columns,   latitude = NULL,   longitude = NULL,   type = NULL,   fun.character = function(x) paste(unique(x), collapse = \", \"),   fun.numeric = function(x) signif(mean(x, na.rm = TRUE), 3),   fun.dttm = function(x) paste(lubridate::floor_date(range(x, na.rm = TRUE), \"day\"),     collapse = \" to \"),   ... )"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/buildPopup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a Complex Popup for a Leaflet Map — buildPopup","text":"data Input data table geo-spatial information. required data frame containing latitude longitude information go used function polarMap(). columns character vector column names include popup. required Summaries selected columns appear popup. named vector provided, names vector used place raw column names. See Examples information. latitude, longitude decimal latitude(Y)/longitude(X). default: NULL | scope: dynamic & static Column names representing decimal latitude longitude (Y/X coordinate using different crs). provided, automatically inferred data looking column named \"lat\"/\"latitude\" \"lon\"/\"lng\"/\"long\"/\"longitude\" (case-insensitively). type column passed type argument another function. default: NULL Column used type argument mapping functions. needs used type going used polarMap() another similar function, expect different values different map layers (example, calculating mean pollutant concentration). fun.character function summarise character factor columns. default: function(x) paste(unique(x), collapse = \", \") default collapses unique values comma-separated list. fun.numeric function summarise numeric columns. default: function(x) signif(mean(x, na.rm = TRUE), 3) default takes mean three significant figures. numeric summaries may interest, maximum, minimum, standard deviation, . fun.dttm function summarise date columns. default: function(x) paste(lubridate::floor_date(range(x, na.rm = TRUE), \"day\"), collapse = \" \") default presents date range. statistics interest start end dates. ... currently used.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/buildPopup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a Complex Popup for a Leaflet Map — buildPopup","text":"tibble::tibble()","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/buildPopup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a Complex Popup for a Leaflet Map — buildPopup","text":"","code":"if (FALSE) { # \\dontrun{ buildPopup(   data = polar_data,   columns = c(     \"Site\" = \"site\",     \"Site Type\" = \"site_type\",     \"Date Range\" = \"date\"   ) ) %>%   polarMap(\"nox\", popup = \"popup\") } # }"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/convertPostcode.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a UK postcode to a latitude/longitude pair — convertPostcode","title":"Convert a UK postcode to a latitude/longitude pair — convertPostcode","text":"much simpler implementation tools found PostcodesioR R package, intended use searchNetwork() function.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/convertPostcode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a UK postcode to a latitude/longitude pair — convertPostcode","text":"","code":"convertPostcode(postcode)"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/convertPostcode.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Convert a UK postcode to a latitude/longitude pair — convertPostcode","text":"https://postcodes.io/","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/convertPostcode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a UK postcode to a latitude/longitude pair — convertPostcode","text":"postcode valid UK postcode. required string containing single valid UK postcode, e.g., \"SW1A 1AA\".","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/convertPostcode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a UK postcode to a latitude/longitude pair — convertPostcode","text":"list containing latitude, longitude, input postcode.","code":""},{"path":[]},{"path":"https://davidcarslaw.github.io/openairmaps/reference/convertPostcode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a UK postcode to a latitude/longitude pair — convertPostcode","text":"","code":"# convert a UK postcode convertPostcode(\"SW1A1AA\") #> $lat #> [1] 51.50101 #>  #> $lng #> [1] -0.141588 #>  #> $postcode #> [1] \"SW1A 1AA\" #>   if (FALSE) { # \\dontrun{ # use with `searchNetwork()` palace <- convertPostcode(\"SW1A1AA\") searchNetwork(lat = palace$lat, lng = palace$lng, max_dist = 10) } # }"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/deprecated-static-polar-maps.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated static directional analysis functions — polarMapStatic","title":"Deprecated static directional analysis functions — polarMapStatic","text":"Static direction analysis mapping functions deprecated favour combined functions (e.g., polarMap()), present consistent, unified API users simply swap two output formats.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/deprecated-static-polar-maps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated static directional analysis functions — polarMapStatic","text":"","code":"polarMapStatic(   data,   pollutant = NULL,   x = \"ws\",   limits = \"free\",   upper = \"fixed\",   latitude = NULL,   longitude = NULL,   crs = 4326,   provider = \"osm\",   facet = NULL,   cols = \"turbo\",   alpha = 1,   key = FALSE,   facet.nrow = NULL,   d.icon = 150,   d.fig = 3,   ... )  diffMapStatic(   before,   after,   pollutant = NULL,   limits = \"free\",   x = \"ws\",   latitude = NULL,   longitude = NULL,   crs = 4326,   provider = \"osm\",   facet = NULL,   cols = c(\"#002F70\", \"#3167BB\", \"#879FDB\", \"#C8D2F1\", \"#F6F6F6\", \"#F4C8C8\", \"#DA8A8B\",     \"#AE4647\", \"#5F1415\"),   alpha = 1,   key = FALSE,   facet.nrow = NULL,   d.icon = 150,   d.fig = 3,   ... )  annulusMapStatic(   data,   pollutant = NULL,   period = \"hour\",   facet = NULL,   limits = \"free\",   latitude = NULL,   longitude = NULL,   crs = 4326,   provider = \"osm\",   cols = \"turbo\",   alpha = 1,   key = FALSE,   facet.nrow = NULL,   d.icon = 150,   d.fig = 3,   ... )  windroseMapStatic(   data,   ws.int = 2,   breaks = 4,   facet = NULL,   latitude = NULL,   longitude = NULL,   crs = 4326,   provider = \"osm\",   cols = \"turbo\",   alpha = 1,   key = FALSE,   facet.nrow = NULL,   d.icon = 150,   d.fig = 3,   ... )  pollroseMapStatic(   data,   pollutant = NULL,   statistic = \"prop.count\",   breaks = NULL,   facet = NULL,   latitude = NULL,   longitude = NULL,   crs = 4326,   provider = \"osm\",   cols = \"turbo\",   alpha = 1,   key = FALSE,   facet.nrow = NULL,   d.icon = 150,   d.fig = 3,   ... )  percentileMapStatic(   data,   pollutant = NULL,   percentile = c(25, 50, 75, 90, 95),   intervals = \"fixed\",   latitude = NULL,   longitude = NULL,   crs = 4326,   provider = \"osm\",   facet = NULL,   cols = \"turbo\",   alpha = 1,   key = FALSE,   facet.nrow = NULL,   d.icon = 150,   d.fig = 3,   ... )  freqMapStatic(   data,   pollutant = NULL,   statistic = \"mean\",   breaks = \"free\",   latitude = NULL,   longitude = NULL,   crs = 4326,   provider = \"osm\",   facet = NULL,   cols = \"turbo\",   alpha = 1,   key = FALSE,   facet.nrow = NULL,   d.icon = 150,   d.fig = 3,   ... )"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/deprecated-static-polar-maps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated static directional analysis functions — polarMapStatic","text":"data Input data table pollutant, wind, geo-spatial information. required | scope: dynamic & static data frame. data frame must contain data plot directional analysis marker, includes wind speed (ws), wind direction (wd), column representing concentration pollutant. addition, data must include decimal latitude longitude (X/Y coordinate used conjunction crs). pollutant Pollutant name(s). required | scope: dynamic & static column name(s) pollutant(s) plot. multiple pollutants specified non-pairwise statistic supplied, type argument longer able used : Dynamic: pollutants can toggled using \"layer control\" menu. Static:: pollutants appear different panel. Multiple pollutants prohibit use type argument non-pairwise statistics. x radial axis variable. default: \"ws\" | scope: dynamic & static column name radial axis variable use openair::polarPlot(). Defaults using wind speed, \"ws\", meteorological variables ambient temperature atmospheric stability may useful. limits Specifier plot colour scale bounds. default: \"free\" | scope: dynamic & static One : \"fixed\" ensures markers use colour scale. \"free\" (default) allows markers use different colour scales. numeric vector form c(lower, upper) used define colour scale. example, limits = c(0, 100) force plot limits span 0-100. upper Specifier polar plot radial axis upper boundary. default: \"fixed\" | scope: dynamic & static One : \"fixed\" (default) ensures markers use radial axis scale. \"free\" allows markers use different radial axis scales. numeric value, used upper limit radial axis scale. latitude, longitude decimal latitude(Y)/longitude(X). default: NULL | scope: dynamic & static Column names representing decimal latitude longitude (Y/X coordinate using different crs). provided, automatically inferred data looking column named \"lat\"/\"latitude\" \"lon\"/\"lng\"/\"long\"/\"longitude\" (case-insensitively). crs coordinate reference system (CRS). default: 4326 | scope: dynamic & static coordinate reference system (CRS) data, passed sf::st_crs(). default EPSG:4326, CRS associated commonly used latitude longitude coordinates. Different coordinate systems can specified using crs (e.g., crs = 27700 British National Grid). Note non-lat/lng coordinate systems re-projected EPSG:4326 plotting map. provider basemap(s) used. default: \"OpenStreetMap\" | scope: dynamic & static base map(s) used beneath polar markers. provided, default \"OpenStreetMap\"/\"osm\" dynamic static maps. Dynamic: number leaflet::providers. See http://leaflet-extras.github.io/leaflet-providers/preview/ list base maps can used. multiple base maps provided, can toggled using \"layer control\" interface. default, interface use provider names labels, users can define using named vector (e.g., c(\"Default\" = \"OpenStreetMap\", \"Satellite\"   = \"Esri.WorldImagery\")) Static: One rosm::osm.types(). overlap static dynamic providers. example, {ggspatial} uses \"osm\" specify \"OpenStreetMap\". static providers provided dynamic maps vice versa, {openairmaps} attempt substitute correct provider string. facet Passed type argument relevant polarMap() family function. cols Colours use plotting. default: \"turbo\" | scope: dynamic & static colours used plotting, passed openair::openColours(). default, \"turbo\", rainbow palette relatively perceptually uniform colours. Read palette https://research.google/blog/turbo--improved-rainbow-colormap--visualization/. alpha Transparency value polar markers. default: 1 | scope: dynamic & static value 0 (fully transparent) 1 (fully opaque). key Draw individual marker legends? default: FALSE | scope: dynamic & static Draw key individual marker? Potentially useful limits = \"free\", limited use otherwise. facet.nrow Passed static.nrow argument relevant polarMap() family function. d.icon diameter plot map pixels. default: 200 | scope: dynamic & static affect size individual polar markers. Alternatively, vector form c(width, height) can provided non-circular marker desired. d.fig diameter plots produced using {openair} inches. default: 3.5 | scope: dynamic & static affect resolution markers map. Alternatively, vector form c(width, height) can provided non-circular marker desired. ... Passed polar plotting function data frame represents \"\" case. See polarPlot() details different input requirements. data frame represents \"\" case. See polarPlot() details different input requirements. period Temporal period radial axis. default: \"hour\" | scope: dynamic & static Options \"hour\" (default, plot diurnal variations), \"season\" plot variation throughout year, \"weekday\" plot day week variation \"trend\" plot trend wind direction. ws.int wind speed interval colour axis. default: 2 | scope: dynamic & static wind speed interval. Default 2 m/s low met masts low mean wind speeds value 1 0.5 m/s may better. breaks Specifier number breaks colour axis. default: 4 | scope: dynamic & static commonly, number break points wind speed openair::windRose(). ws.int default 2, default breaks, 4, generates break points 2, 4, 6, 8. Breaks can also used set specific break points. example, argument `breaks = c(0, 1, 10, 100)“ breaks data segments <1, 1-10, 10-100, >100. statistic statistic applied data bin plot default: \"prop.mean\" | scope: dynamic & static Options currently include \"prop.count\", \"prop.mean\" \"abs.count\". \"prop.count\" sizes bins according proportion frequency measurements.  Similarly, \"prop.mean\" sizes bins according relative contribution mean. \"abs.count\" provides absolute count measurements bin. percentile percentile values colour scale bin. default: c(25, 50, 75, 90, 95) | scope: dynamic & static percentile value(s) plot using openair::percentileRose(). Must vector values 0 100. percentile = NA mean line shown. intervals Specifier percentile rose radial axis intervals. default: \"fixed\" | scope: dynamic & static One : \"fixed\" (default) ensures markers use radial axis scale. \"free\" allows markers use different radial axis scales. numeric vector defining sequence numbers use intervals, e.g., intervals = c(0, 10, 30, 50).","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/deprecated-static-polar-maps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated static directional analysis functions — polarMapStatic","text":"ggplot2 object using ggplot2::coord_sf() coordinates ggspatial basemap","code":""},{"path":[]},{"path":"https://davidcarslaw.github.io/openairmaps/reference/diffMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Bivariate polar 'difference' plots on dynamic and static maps — diffMap","title":"Bivariate polar 'difference' plots on dynamic and static maps — diffMap","text":"diffMap() function creates map using bivariate polar plots markers. number pollutants can specified using pollutant argument, multiple layers markers can created using type. default, maps dynamic can panned, zoomed, otherwise interacted . Using static argument allows static images produced instead.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/diffMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bivariate polar 'difference' plots on dynamic and static maps — diffMap","text":"","code":"diffMap(   before,   after,   pollutant = NULL,   x = \"ws\",   limits = \"free\",   latitude = NULL,   longitude = NULL,   crs = 4326,   type = NULL,   popup = NULL,   label = NULL,   provider = \"OpenStreetMap\",   cols = rev(openair::openColours(\"RdBu\", 10)),   alpha = 1,   key = FALSE,   legend = TRUE,   legend.position = NULL,   legend.title = NULL,   legend.title.autotext = TRUE,   control.collapsed = FALSE,   control.position = \"topright\",   control.autotext = TRUE,   d.icon = 200,   d.fig = 3.5,   static = FALSE,   static.nrow = NULL,   progress = TRUE,   ...,   control = NULL )"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/diffMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bivariate polar 'difference' plots on dynamic and static maps — diffMap","text":"data frame represents \"\" case. See polarPlot() details different input requirements. data frame represents \"\" case. See polarPlot() details different input requirements. pollutant Mandatory. pollutant name corresponding variable data frame supplied e.g. pollutant = \"nox\". can also one pollutant specified e.g. pollutant = c(\"nox\",   \"no2\"). main use using two pollutants model evaluation two species expected similar concentrations. saves user stacking data possible work columns data directly. typical use pollutant   = c(\"obs\", \"mod\") compare two columns “obs” (observations) “mod” (modelled values). pair-wise statistics Pearson correlation regression techniques plotted, pollutant takes two elements . example, pollutant =   c(\"bc\", \"pm25\") \"bc\" function \"pm25\". x Name variable plot wind direction polar coordinates, default wind speed, “ws”. limits Limits plot colour scale. default: \"free\" | scope: dynamic & static One : \"free\" (default) allows markers use different colour scales. numeric vector form c(lower, upper) used define colour scale. example, limits = c(-10, 10) force plot limits span -10 10. recommended use symmetrical limit scale (along \"diverging\" colour palette) effective visualisation. Note \"fixed\" option supported diffMap(). latitude, longitude decimal latitude(Y)/longitude(X). default: NULL | scope: dynamic & static Column names representing decimal latitude longitude (Y/X coordinate using different crs). provided, automatically inferred data looking column named \"lat\"/\"latitude\" \"lon\"/\"lng\"/\"long\"/\"longitude\" (case-insensitively). crs coordinate reference system (CRS). default: 4326 | scope: dynamic & static coordinate reference system (CRS) data, passed sf::st_crs(). default EPSG:4326, CRS associated commonly used latitude longitude coordinates. Different coordinate systems can specified using crs (e.g., crs = 27700 British National Grid). Note non-lat/lng coordinate systems re-projected EPSG:4326 plotting map. type method condition data separate plotting. default: NULL | scope: dynamic & static Used splitting input data different groups, passed type argument openair::cutData(). type specified: Dynamic: different data splits can toggled using \"layer control\" menu. Static:: data splits appear different panel. type used multiple pollutant columns provided. popup Content marker popups dynamic maps. default: NULL | scope: dynamic Columns used HTML content marker popups dynamic maps. Popups may useful show information individual sites (e.g., site names, codes, types, etc.). vector column names provided passed buildPopup() using default values. label Content marker hover-dynamic maps. default: NULL | scope: dynamic Column used HTML content hover-labels. Labels useful reasons popups, though typically shorter. provider basemap(s) used. default: \"OpenStreetMap\" | scope: dynamic & static base map(s) used beneath polar markers. provided, default \"OpenStreetMap\"/\"osm\" dynamic static maps. Dynamic: number leaflet::providers. See http://leaflet-extras.github.io/leaflet-providers/preview/ list base maps can used. multiple base maps provided, can toggled using \"layer control\" interface. default, interface use provider names labels, users can define using named vector (e.g., c(\"Default\" = \"OpenStreetMap\", \"Satellite\"   = \"Esri.WorldImagery\")) Static: One rosm::osm.types(). overlap static dynamic providers. example, {ggspatial} uses \"osm\" specify \"OpenStreetMap\". static providers provided dynamic maps vice versa, {openairmaps} attempt substitute correct provider string. cols Colours use plotting. default: rev(openair::openColours(\"RdBu\", 10)) | scope: dynamic & static colours used plotting, passed openair::openColours().  recommended use \"diverging\" colour palette (along symmetrical limit scale) effective visualisation. alpha Transparency value polar markers. default: 1 | scope: dynamic & static value 0 (fully transparent) 1 (fully opaque). key Draw individual marker legends? default: FALSE | scope: dynamic & static Draw key individual marker? Potentially useful limits = \"free\", limited use otherwise. legend Draw shared legend? default: TRUE | scope: dynamic & static markers share colour scale (e.g., limits != \"free\" polarMap()), shared legend created side map? legend.position Position shared legend. default: NULL | scope: dynamic & static legend = TRUE, legend placed? Dynamic: One \"topright\", \"topright\", \"bottomleft\" \"bottomright\". Passed position argument leaflet::addLegend(). Static:: One \"top\", \"right\", \"bottom\" \"left\". Passed legend.position argument ggplot2::theme(). legend.title Title legend. default: NULL | scope: dynamic & static default, legend.title = NULL, function attempt provide sensible legend title. legend.title allows users overwrite - example, include units contextual information. dynamic maps, users may wish use HTML tags format title. legend.title.autotext Automatically format title legend? default: TRUE | scope: dynamic & static legend.title.autotext = TRUE, legend.title first run quickTextHTML() (dynamic) openair::quickText() (static). control.collapsed Show layer control collapsed? default: FALSE | scope: dynamic dynamic maps, \"layer control\" interface collapsed? TRUE, users hover icon view options. control.position Position layer control menu default: \"topright\" | scope: dynamic type != NULL, multiple pollutants specified, \"layer control\" interface placed? One \"topleft\", \"topright\", \"bottomleft\" \"bottomright\". Passed position argument leaflet::addLayersControl(). control.autotext Automatically format content layer control menu? default: TRUE | scope: dynamic control.autotext = TRUE, content \"layer control\" interface first run quickTextHTML(). d.icon diameter plot map pixels. default: 200 | scope: dynamic & static affect size individual polar markers. Alternatively, vector form c(width, height) can provided non-circular marker desired. d.fig diameter plots produced using {openair} inches. default: 3.5 | scope: dynamic & static affect resolution markers map. Alternatively, vector form c(width, height) can provided non-circular marker desired. static Produce static map? default: FALSE controls whether dynamic static map produced. former default broadly useful, latter may preferable DOCX PDF outputs (e.g., academic papers). static.nrow Number rows static map. default: NULL | scope: static Controls number rows panels static map multiple pollutants type specified; passed nrow argument ggplot2::facet_wrap(). default, NULL, results roughly square grid panels. progress Show progress bar? default: TRUE | scope: dynamic & static default, progress bar shown visualise function's progress creating individual polar markers. option allows turned , desired. ... Arguments passed openair::polarPlot wd Name wind direction field. statistic statistic applied wind speed/direction bin. smoothing involved, colour scale statistics provide indication overall pattern interpreted concentration units e.g. statistic = \"weighted.mean\" bin mean multiplied bin frequency divided total frequency. many cases using polarFreq better. Setting statistic = \"weighted.mean\" can useful provides indication concentration * frequency occurrence highlight wind speed/direction conditions dominate overall mean.Can : “mean” (default), “median”, “max” (maximum), “frequency”. “stdev” (standard deviation), “weighted.mean”. statistic = \"nwr\" Implements Non-parametric Wind Regression approach Henry et al. (2009) uses kernel smoothers. openair implementation identical Gaussian kernels used wind direction speed. smoothing controlled ws_spread wd_spread. statistic = \"cpf\" conditional probability function (CPF) plotted single (usually high) percentile level supplied. CPF defined CPF = /ny, number samples y bin (default wind direction, wind speed interval) mixing ratios greater overall percentile concentration, ny total number samples wind sector (see Ashbaugh et al., 1985). Note percentile intervals can also considered; see percentile details. statistic = \"r\" statistic = \"Pearson\", Pearson correlation coefficient calculated two pollutants. calculation involves weighted Pearson correlation coefficient, weighted Gaussian kernels wind direction radial variable (default wind speed). weight assigned values close wind speed-direction interval. Kernel weighting used ensure data used rather relying potentially small number values wind speed-direction interval. statistic = \"Spearman\", Spearman correlation coefficient calculated two pollutants. calculation involves weighted Spearman correlation coefficient, weighted Gaussian kernels wind direction radial variable (default wind speed). weight assigned values close wind speed-direction interval. Kernel weighting used ensure data used rather relying potentially small number values wind speed-direction interval. \"robust_slope\" another option pair-wise statistics \"quantile.slope\", uses quantile regression estimate slope particular quantile level (see also tau setting quantile level). \"york_slope\" another option pair-wise statistics uses York regression method estimate slope. method uncertainties x y used determination slope. uncertainties provided x_error y_error — see . exclude.missing Setting option TRUE (default) removes points plot far original data. smoothing routines produce predictions points data exist .e. predict. removing points far original data produces plot clear original data lie. set FALSE missing data interpolated. uncertainty uncertainty calculated surface shown? TRUE three plots produced scale showing predicted surface together estimated lower upper uncertainties 95% confidence interval. Calculating uncertainties useful understand whether features real .  example, high wind speeds data greater uncertainty predicted values. uncertainties calculated using GAM weighting done frequency measurements wind speed-direction bin. Note uncertainties calculated type set \"default\". percentile statistic = \"percentile\" percentile used, expressed 0 100. Note percentile value calculated wind speed, wind direction ‘bins’. reason can also useful set min.bin ensure sufficient number points available estimate percentile. See quantile details percentiles calculated. percentile also used Conditional Probability Function (CPF) plots. percentile can length two, case percentile interval considered use CPF. example, percentile = c(90, 100) plot CPF concentrations 90 100th percentiles. Percentile intervals can useful identifying specific sources. addition, percentile can also length 3. third value ‘trim’ value applied. calculating percentile intervals many can cover low values useful information. trim value ensures values greater equal trim * mean value considered percentile intervals calculated. effect extract detail many source signatures. See manual examples. Finally, trim value less zero percentile range interpreted absolute concentration values subsetting carried directly. weights edges plot may data points wind speed-direction interval, situations distort plot concentrations high. weights applies weighting reduce influence. example default single data point exists weighting factor 0.25 two points 0.5. apply weighting use data , use weights = c(1, 1, 1). alternative -weighting points can removed altogether using min.bin. min.bin minimum number points allowed wind speed/wind direction bin.  default 1. value two requires least 2 valid records bin ; bins less 2 valid records set NA. Care taken using value > 1 risk removing real data points. recommended consider data care. Also, polarFreq function can use circumstances. mis.col min.bin > 1 can useful show data removed plots. done shading missing data mis.col. highlight missing data min.bin > 1 choose mis.col = \"transparent\". upper sets upper limit wind speed used. Often relatively data points high wind speeds plotting can reduce useful information plot. force.positive default TRUE. Sometimes smoothing data steep gradients possible predicted values negative. force.positive = TRUE ensures predictions remain positive. useful several reasons. First, lots missing data interpolation needed can result artefacts predictions far original data. Second, known beforehand data positive, option carries assumption prediction. likely time setting force.positive = FALSE background concentrations first subtracted resulting data legitimately negative. vast majority situations expected user need alter default option. k smoothing parameter used gam function package mgcv. Typically, value around 100 (default) seems suitable resolve important features plot. appropriate choice k problem-dependent; extensive testing polar plots many different problems suggests value k 100 suitable. Setting k higher values tend affect surface predictions much add computation time. Lower values k increase smoothing. Sometimes data plot polarPlot fail. circumstances can worth lowering value k. normalise TRUE concentrations normalised dividing mean value. done fitting smooth surface. option particularly useful one interested patterns concentrations several pollutants different scales e.g. NOx CO. Often useful one pollutant chosen. auto.text Either TRUE (default) FALSE. TRUE titles axis labels automatically try format pollutant names units properly e.g.  subscripting `2' NO2. ws_spread value sigma used Gaussian kernel weighting wind speed statistic = \"nwr\" correlation regression statistics used r. Default 0.5. wd_spread value sigma used Gaussian kernel weighting wind direction statistic = \"nwr\" correlation regression statistics used r. Default 4. x_error x error / uncertainty used statistic = \"york_slope\". y_error y error / uncertainty used statistic = \"york_slope\". kernel Type kernel used weighting procedure correlation regression techniques used. \"gaussian\" supported may enhanced future. formula.label pair-wise statistics regression slopes calculated plotted, formula label displayed? formula.label also determine whether concentration information printed statistic = \"cpf\". tau quantile estimated statistic set \"quantile.slope\". Default 0.5 equal median ignored \"quantile.slope\" used. plot plot produced? FALSE can useful analysing data extract plot components plotting ways. control Deprecated. Please use type.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/diffMap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bivariate polar 'difference' plots on dynamic and static maps — diffMap","text":"Either: Dynamic: leaflet object Static: ggplot2 object using ggplot2::coord_sf() coordinates ggspatial basemap","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/diffMap.html","id":"customisation-of-static-maps-using-ggplot-","dir":"Reference","previous_headings":"","what":"Customisation of static maps using ggplot2","title":"Bivariate polar 'difference' plots on dynamic and static maps — diffMap","text":"outputs static directional analysis functions ggplot2 figures, customisation possible using functions ggplot2::theme(), ggplot2::guides() ggplot2::labs(). multiple pollutants specified, subscripting (e.g., \"x\" \"NOx\") achieved using ggtext package. Therefore choose override plot theme, recommended use [ggplot2::theme()] [ggtext::element_markdown()] define strip.text parameter. arguments like limits, percentile breaks defined, legend automatically added figure. Legends can removed using ggplot2::theme(legend.position = \"none\"), customised using ggplot2::guides() either color = ggplot2::guide_colourbar() continuous legends fill = ggplot2::guide_legend() discrete legends.","code":""},{"path":[]},{"path":"https://davidcarslaw.github.io/openairmaps/reference/diffMap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bivariate polar 'difference' plots on dynamic and static maps — diffMap","text":"","code":"if (FALSE) { # \\dontrun{ # NB: \"after\" is some dummy data to demonstrate functionality diffMap(   before = polar_data,   after = dplyr::mutate(polar_data, nox = jitter(nox, factor = 5)),   pollutant = \"nox\" ) } # }"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/freqMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Polar frequency plots on dynamic and static maps — freqMap","title":"Polar frequency plots on dynamic and static maps — freqMap","text":"freqMap() function creates map using polar frequency plots markers. number pollutants can specified using pollutant argument, multiple layers markers can created using type. default, maps dynamic can panned, zoomed, otherwise interacted . Using static argument allows static images produced instead.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/freqMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Polar frequency plots on dynamic and static maps — freqMap","text":"","code":"freqMap(   data,   pollutant = NULL,   statistic = \"mean\",   breaks = \"free\",   latitude = NULL,   longitude = NULL,   crs = 4326,   type = NULL,   popup = NULL,   label = NULL,   provider = \"OpenStreetMap\",   cols = \"turbo\",   alpha = 1,   key = FALSE,   legend = TRUE,   legend.position = NULL,   legend.title = NULL,   legend.title.autotext = TRUE,   control.collapsed = FALSE,   control.position = \"topright\",   control.autotext = TRUE,   d.icon = 200,   d.fig = 3.5,   static = FALSE,   static.nrow = NULL,   progress = TRUE,   ...,   control = NULL )"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/freqMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Polar frequency plots on dynamic and static maps — freqMap","text":"data Input data table pollutant, wind, geo-spatial information. required | scope: dynamic & static data frame. data frame must contain data plot directional analysis marker, includes wind speed (ws), wind direction (wd), column representing concentration pollutant. addition, data must include decimal latitude longitude (X/Y coordinate used conjunction crs). pollutant Pollutant name(s). required | scope: dynamic & static column name(s) pollutant(s) plot. multiple pollutants specified non-pairwise statistic supplied, type argument longer able used : Dynamic: pollutants can toggled using \"layer control\" menu. Static:: pollutants appear different panel. Multiple pollutants prohibit use type argument non-pairwise statistics. statistic statistic applied wind speed/direction bin. default: \"mean\" | scope: dynamic & static Can \"frequency\", \"mean\", \"median\", \"max\" (maximum), \"stdev\" (standard deviation) \"weighted.mean\". option \"frequency\" simplest plots frequency wind speed/direction different bins. scale therefore shows counts bin. option \"mean\" (default) plot mean concentration pollutant (see next point) wind speed/direction bins, .  Finally, \"weighted.mean\" plot concentration pollutant weighted wind speed/direction. segment therefore provides percentage overall contribution total concentration. Note options \"frequency\", necessary also provide name pollutant. See function openair::cutData() details. breaks Specifier breaks plot colour scale. default: \"free\" | scope: dynamic & static One : \"fixed\" ensures markers use colour scale. \"free\" (default) allows markers use different colour scales. numeric vector defining sequence numbers use breaks. sequence represent one equal spacing, e.g., breaks = seq(0, 100, 10) - scale 0-10 intervals 10, flexible sequence, e.g., breaks = c(0, 1, 5, 7, 10), may useful situations. latitude, longitude decimal latitude(Y)/longitude(X). default: NULL | scope: dynamic & static Column names representing decimal latitude longitude (Y/X coordinate using different crs). provided, automatically inferred data looking column named \"lat\"/\"latitude\" \"lon\"/\"lng\"/\"long\"/\"longitude\" (case-insensitively). crs coordinate reference system (CRS). default: 4326 | scope: dynamic & static coordinate reference system (CRS) data, passed sf::st_crs(). default EPSG:4326, CRS associated commonly used latitude longitude coordinates. Different coordinate systems can specified using crs (e.g., crs = 27700 British National Grid). Note non-lat/lng coordinate systems re-projected EPSG:4326 plotting map. type method condition data separate plotting. default: NULL | scope: dynamic & static Used splitting input data different groups, passed type argument openair::cutData(). type specified: Dynamic: different data splits can toggled using \"layer control\" menu. Static:: data splits appear different panel. type used multiple pollutant columns provided. popup Content marker popups dynamic maps. default: NULL | scope: dynamic Columns used HTML content marker popups dynamic maps. Popups may useful show information individual sites (e.g., site names, codes, types, etc.). vector column names provided passed buildPopup() using default values. label Content marker hover-dynamic maps. default: NULL | scope: dynamic Column used HTML content hover-labels. Labels useful reasons popups, though typically shorter. provider basemap(s) used. default: \"OpenStreetMap\" | scope: dynamic & static base map(s) used beneath polar markers. provided, default \"OpenStreetMap\"/\"osm\" dynamic static maps. Dynamic: number leaflet::providers. See http://leaflet-extras.github.io/leaflet-providers/preview/ list base maps can used. multiple base maps provided, can toggled using \"layer control\" interface. default, interface use provider names labels, users can define using named vector (e.g., c(\"Default\" = \"OpenStreetMap\", \"Satellite\"   = \"Esri.WorldImagery\")) Static: One rosm::osm.types(). overlap static dynamic providers. example, {ggspatial} uses \"osm\" specify \"OpenStreetMap\". static providers provided dynamic maps vice versa, {openairmaps} attempt substitute correct provider string. cols Colours use plotting. default: \"turbo\" | scope: dynamic & static colours used plotting, passed openair::openColours(). default, \"turbo\", rainbow palette relatively perceptually uniform colours. Read palette https://research.google/blog/turbo--improved-rainbow-colormap--visualization/. alpha Transparency value polar markers. default: 1 | scope: dynamic & static value 0 (fully transparent) 1 (fully opaque). key Draw individual marker legends? default: FALSE | scope: dynamic & static Draw key individual marker? Potentially useful limits = \"free\", limited use otherwise. legend Draw shared legend? default: TRUE | scope: dynamic & static markers share colour scale (e.g., limits != \"free\" polarMap()), shared legend created side map? legend.position Position shared legend. default: NULL | scope: dynamic & static legend = TRUE, legend placed? Dynamic: One \"topright\", \"topright\", \"bottomleft\" \"bottomright\". Passed position argument leaflet::addLegend(). Static:: One \"top\", \"right\", \"bottom\" \"left\". Passed legend.position argument ggplot2::theme(). legend.title Title legend. default: NULL | scope: dynamic & static default, legend.title = NULL, function attempt provide sensible legend title. legend.title allows users overwrite - example, include units contextual information. dynamic maps, users may wish use HTML tags format title. legend.title.autotext Automatically format title legend? default: TRUE | scope: dynamic & static legend.title.autotext = TRUE, legend.title first run quickTextHTML() (dynamic) openair::quickText() (static). control.collapsed Show layer control collapsed? default: FALSE | scope: dynamic dynamic maps, \"layer control\" interface collapsed? TRUE, users hover icon view options. control.position Position layer control menu default: \"topright\" | scope: dynamic type != NULL, multiple pollutants specified, \"layer control\" interface placed? One \"topleft\", \"topright\", \"bottomleft\" \"bottomright\". Passed position argument leaflet::addLayersControl(). control.autotext Automatically format content layer control menu? default: TRUE | scope: dynamic control.autotext = TRUE, content \"layer control\" interface first run quickTextHTML(). d.icon diameter plot map pixels. default: 200 | scope: dynamic & static affect size individual polar markers. Alternatively, vector form c(width, height) can provided non-circular marker desired. d.fig diameter plots produced using {openair} inches. default: 3.5 | scope: dynamic & static affect resolution markers map. Alternatively, vector form c(width, height) can provided non-circular marker desired. static Produce static map? default: FALSE controls whether dynamic static map produced. former default broadly useful, latter may preferable DOCX PDF outputs (e.g., academic papers). static.nrow Number rows static map. default: NULL | scope: static Controls number rows panels static map multiple pollutants type specified; passed nrow argument ggplot2::facet_wrap(). default, NULL, results roughly square grid panels. progress Show progress bar? default: TRUE | scope: dynamic & static default, progress bar shown visualise function's progress creating individual polar markers. option allows turned , desired. ... Arguments passed openair::polarFreq ws.int Wind speed interval assumed. cases e.g. low met mast, interval 0.5 may appropriate. wd.nint Number intervals wind direction. grid.line Radial spacing grid lines. trans transformation applied? Sometimes producing plots kind can dominated high points. default therefore TRUE square-root transform applied. results non-linear scale (usually) better representation distribution. set FALSE linear scale used. min.bin minimum number points allowed wind speed/wind direction bin.  default 1. value two requires least 2 valid records bin ; bins less 2 valid records set NA. Care taken using value > 1 risk removing real data points. recommended consider data care. Also, polarFreq function can use circumstances. ws.upper user-defined upper wind speed use. useful ensuring consistent scale different plots. example, always ensure wind speeds displayed 1-10, set ws.int = 10. offset offset controls size ‘hole’ middle expressed percentage maximum wind speed. Setting higher offset e.g. 50 useful statistic =   \"weighted.mean\" ws.int greater maximum wind speed. See example . border.col colour boundary wind speed/direction bin. default transparent. Another useful choice sometimes \"white\". key.header Adds additional text/labels scale key. example, passing options key.header = \"header\", key.footer = \"footer1\" adds addition text scale key. arguments passed drawOpenKey via quickText, applying auto.text argument, handle formatting. key.footer see key.footer. key.position Location scale key plotted. Allowed arguments currently include \"top\", \"right\", \"bottom\" \"left\". auto.text Either TRUE (default) FALSE. TRUE titles axis labels automatically try format pollutant names units properly e.g.  subscripting `2' NO2. control Deprecated. Please use type.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/freqMap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Polar frequency plots on dynamic and static maps — freqMap","text":"Either: Dynamic: leaflet object Static: ggplot2 object using ggplot2::coord_sf() coordinates ggspatial basemap","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/freqMap.html","id":"customisation-of-static-maps-using-ggplot-","dir":"Reference","previous_headings":"","what":"Customisation of static maps using ggplot2","title":"Polar frequency plots on dynamic and static maps — freqMap","text":"outputs static directional analysis functions ggplot2 figures, customisation possible using functions ggplot2::theme(), ggplot2::guides() ggplot2::labs(). multiple pollutants specified, subscripting (e.g., \"x\" \"NOx\") achieved using ggtext package. Therefore choose override plot theme, recommended use [ggplot2::theme()] [ggtext::element_markdown()] define strip.text parameter. arguments like limits, percentile breaks defined, legend automatically added figure. Legends can removed using ggplot2::theme(legend.position = \"none\"), customised using ggplot2::guides() either color = ggplot2::guide_colourbar() continuous legends fill = ggplot2::guide_legend() discrete legends.","code":""},{"path":[]},{"path":"https://davidcarslaw.github.io/openairmaps/reference/freqMap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Polar frequency plots on dynamic and static maps — freqMap","text":"","code":"if (FALSE) { # \\dontrun{ freqMap(polar_data,   pollutant = \"nox\",   statistic = \"mean\",   provider = \"CartoDB.Voyager\" ) } # }"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/networkMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a leaflet map of air quality measurement network sites — networkMap","title":"Create a leaflet map of air quality measurement network sites — networkMap","text":"function uses openair::importMeta() obtain metadata measurement sites uses create attractive leaflet map. default map created readers may toggle vector base map satellite/aerial image, although users can customise control menu using provider control parameters.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/networkMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a leaflet map of air quality measurement network sites — networkMap","text":"","code":"networkMap(   source = \"aurn\",   control = NULL,   year = NULL,   cluster = TRUE,   provider = c(Default = \"OpenStreetMap\", Satellite = \"Esri.WorldImagery\"),   legend = TRUE,   legend.position = \"topright\",   control.collapsed = FALSE,   control.position = \"topright\" )"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/networkMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a leaflet map of air quality measurement network sites — networkMap","text":"source One UK European monitoring networks. default: \"aurn\" One air quality networks data available openair. Available networks include: \"aurn\", UK Automatic Urban Rural Network. \"aqe\", Air Quality England Network. \"saqn\", Scottish Air Quality Network. \"waqn\", Welsh Air Quality Network. \"ni\", Northern Ireland Air Quality Network. \"local\", Locally managed air quality networks England. \"kcl\", King's College London networks. \"europe\", European AirBase/e-reporting data. two additional options provided convenience: \"ukaq\" return metadata networks data imported importUKAQ() (.e., AURN, AQE, SAQN, WAQN, NI, local networks). \"\" import available metadata (.e., \"ukaq\" plus \"kcl\" \"europe\"). control Option create 'layer control' menu. default: NULL string specify categories \"layer control\" menu, allow readers select different site categories. Choices include: \"variable\" toggle different pollutants \"site_type\" different site classifications \"agglomeration\", \"zone\" \"local_authority\" different regions UK \"network\" different monitoring networks, one source provided. year year, range years, filter data. default: NULL default, networkMap() visualises sites currently operational. year allows users show sites open specific year, range years. See openair::importMeta() information. cluster Cluster markers together zoomed ? default: TRUE cluster = TRUE, markers clustered together. may useful sources like \"kcl\" many markers close together. Defaults TRUE, forced TRUE source = \"europe\" due large number sites. provider basemap(s) used. default: c(\"Default\" = \"OpenStreetMap\", \"Satellite\" = \"Esri.WorldImagery\") number leaflet::providers. See http://leaflet-extras.github.io/leaflet-providers/preview/ list base maps can used. multiple base maps provided, can toggled using \"layer control\" interface. default, interface use provider names labels, users can define using named vector (e.g., c(\"Default\" = \"OpenStreetMap\", \"Satellite\" = \"Esri.WorldImagery\")) legend Draw shared legend? default: TRUE multiple sources defined, shared legend created side map? legend.position Position legend default: \"topright\" shared legend placed? One \"topleft\", \"topright\", \"bottomleft\" \"bottomright\". Passed position argument leaflet::addLayersControl(). control.collapsed Show layer control collapsed? default: FALSE \"layer control\" interface collapsed? TRUE, users hover icon view options. control.position Position layer control menu default: \"topright\" \"layer control\" interface placed? One \"topleft\", \"topright\", \"bottomleft\" \"bottomright\". Passed position argument leaflet::addLayersControl().","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/networkMap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a leaflet map of air quality measurement network sites — networkMap","text":"leaflet object.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/networkMap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a leaflet map of air quality measurement network sites — networkMap","text":"selecting multiple data sources using source, please mindful can overlap different networks. example, air quality site Scotland may part AURN SAQN. networkMap() show one marker sites, uses order source arguments provided hierarchy assign sites networks. aforementioned AURN & SAQN site therefore SAQN code displayed source = c(\"saqn\", \"aurn\"), AURN code displayed source = c(\"aurn\", \"saqn\"). hierarchy also reflected control = \"network\" used. leaflet markers part multiple groups, AURN & SAQN site part \"SAQN\" layer control group source = c(\"saqn\", \"aurn\") \"AURN\" layer control group source = c(\"aurn\", \"saqn\").","code":""},{"path":[]},{"path":"https://davidcarslaw.github.io/openairmaps/reference/networkMap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a leaflet map of air quality measurement network sites — networkMap","text":"","code":"if (FALSE) { # \\dontrun{ # view one network, grouped by site type networkMap(source = \"aurn\", control = \"site_type\")  # view multiple networks, grouped by network networkMap(source = c(\"aurn\", \"waqn\", \"saqn\"), control = \"network\") } # }"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/openairmaps-package.html","id":null,"dir":"Reference","previous_headings":"","what":"openairmaps: Create Maps of Air Pollution Data — openairmaps-package","title":"openairmaps: Create Maps of Air Pollution Data — openairmaps-package","text":"Combine air quality data analysis methods 'openair' JavaScript 'Leaflet' (https://leafletjs.com/) library. Functionality includes plotting site maps, \"directional analysis\" figures polar plots, air mass trajectories.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/openairmaps-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"openairmaps: Create Maps of Air Pollution Data — openairmaps-package","text":"companion package openair, UK NERC- Defra-funded R package analysis data pertaining pollution monitoring dispersion modelling. R ecosystem developed, R Markdown , recently, Quarto emerged capable tools combining data analysis document preparation. approaches can render typical .docx .pdf outputs, one common output formats HTML document. format many strengths, key one interactivity; HTML widgets allow documents informative engaging. Numerous packages developed easily develop interactive widgets, plotly dygraphs plots, DT tables, leaflet maps. openairmaps package concerns making leaflet maps. Air quality data analysis — particularly pertains long term monitoring data — naturally lends visualised spatially map. Monitoring networks geographically distributed, ignoring geographical context may lead incomplete insights best incorrect conclusions worst! Furthermore, many air quality analysis tools directional, asking questions data along lines “elevated concentrations come North, South, East West?” natural question follows “well, actually North/South/East/West causing elevated concentrations?” — map can help answer question straightforwardly. openairmaps package contains functions visualise UK air quality networks, place \"polar analysis\" markers (like openair polar plot) airmass trajectory paths maps. uses similar syntax openair package, make moving two relatively seamless.","code":""},{"path":[]},{"path":"https://davidcarslaw.github.io/openairmaps/reference/openairmaps-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"openairmaps: Create Maps of Air Pollution Data — openairmaps-package","text":"Maintainer: Jack Davison jack.davison@ricardo.com (ORCID) Authors: David Carslaw david.carslaw@york.ac.uk (ORCID)","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/percentileMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Percentile roses on dynamic and static maps — percentileMap","title":"Percentile roses on dynamic and static maps — percentileMap","text":"percentileMap() function creates map using polar percentile roses markers. number pollutants can specified using pollutant argument, multiple layers markers can created using type. default, maps dynamic can panned, zoomed, otherwise interacted . Using static argument allows static images produced instead.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/percentileMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Percentile roses on dynamic and static maps — percentileMap","text":"","code":"percentileMap(   data,   pollutant = NULL,   percentile = c(25, 50, 75, 90, 95),   intervals = \"fixed\",   latitude = NULL,   longitude = NULL,   crs = 4326,   type = NULL,   popup = NULL,   label = NULL,   provider = \"OpenStreetMap\",   cols = \"turbo\",   alpha = 1,   key = FALSE,   legend = TRUE,   legend.position = NULL,   legend.title = NULL,   legend.title.autotext = TRUE,   control.collapsed = FALSE,   control.position = \"topright\",   control.autotext = TRUE,   d.icon = 200,   d.fig = 3.5,   static = FALSE,   static.nrow = NULL,   progress = TRUE,   ...,   control = NULL )"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/percentileMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Percentile roses on dynamic and static maps — percentileMap","text":"data Input data table pollutant, wind, geo-spatial information. required | scope: dynamic & static data frame. data frame must contain data plot directional analysis marker, includes wind speed (ws), wind direction (wd), column representing concentration pollutant. addition, data must include decimal latitude longitude (X/Y coordinate used conjunction crs). pollutant Pollutant name(s). required | scope: dynamic & static column name(s) pollutant(s) plot. multiple pollutants specified non-pairwise statistic supplied, type argument longer able used : Dynamic: pollutants can toggled using \"layer control\" menu. Static:: pollutants appear different panel. Multiple pollutants prohibit use type argument non-pairwise statistics. percentile percentile values colour scale bin. default: c(25, 50, 75, 90, 95) | scope: dynamic & static percentile value(s) plot using openair::percentileRose(). Must vector values 0 100. percentile = NA mean line shown. intervals Specifier percentile rose radial axis intervals. default: \"fixed\" | scope: dynamic & static One : \"fixed\" (default) ensures markers use radial axis scale. \"free\" allows markers use different radial axis scales. numeric vector defining sequence numbers use intervals, e.g., intervals = c(0, 10, 30, 50). latitude, longitude decimal latitude(Y)/longitude(X). default: NULL | scope: dynamic & static Column names representing decimal latitude longitude (Y/X coordinate using different crs). provided, automatically inferred data looking column named \"lat\"/\"latitude\" \"lon\"/\"lng\"/\"long\"/\"longitude\" (case-insensitively). crs coordinate reference system (CRS). default: 4326 | scope: dynamic & static coordinate reference system (CRS) data, passed sf::st_crs(). default EPSG:4326, CRS associated commonly used latitude longitude coordinates. Different coordinate systems can specified using crs (e.g., crs = 27700 British National Grid). Note non-lat/lng coordinate systems re-projected EPSG:4326 plotting map. type method condition data separate plotting. default: NULL | scope: dynamic & static Used splitting input data different groups, passed type argument openair::cutData(). type specified: Dynamic: different data splits can toggled using \"layer control\" menu. Static:: data splits appear different panel. type used multiple pollutant columns provided. popup Content marker popups dynamic maps. default: NULL | scope: dynamic Columns used HTML content marker popups dynamic maps. Popups may useful show information individual sites (e.g., site names, codes, types, etc.). vector column names provided passed buildPopup() using default values. label Content marker hover-dynamic maps. default: NULL | scope: dynamic Column used HTML content hover-labels. Labels useful reasons popups, though typically shorter. provider basemap(s) used. default: \"OpenStreetMap\" | scope: dynamic & static base map(s) used beneath polar markers. provided, default \"OpenStreetMap\"/\"osm\" dynamic static maps. Dynamic: number leaflet::providers. See http://leaflet-extras.github.io/leaflet-providers/preview/ list base maps can used. multiple base maps provided, can toggled using \"layer control\" interface. default, interface use provider names labels, users can define using named vector (e.g., c(\"Default\" = \"OpenStreetMap\", \"Satellite\"   = \"Esri.WorldImagery\")) Static: One rosm::osm.types(). overlap static dynamic providers. example, {ggspatial} uses \"osm\" specify \"OpenStreetMap\". static providers provided dynamic maps vice versa, {openairmaps} attempt substitute correct provider string. cols Colours use plotting. default: \"turbo\" | scope: dynamic & static colours used plotting, passed openair::openColours(). default, \"turbo\", rainbow palette relatively perceptually uniform colours. Read palette https://research.google/blog/turbo--improved-rainbow-colormap--visualization/. alpha Transparency value polar markers. default: 1 | scope: dynamic & static value 0 (fully transparent) 1 (fully opaque). key Draw individual marker legends? default: FALSE | scope: dynamic & static Draw key individual marker? Potentially useful limits = \"free\", limited use otherwise. legend Draw shared legend? default: TRUE | scope: dynamic & static markers share colour scale (e.g., limits != \"free\" polarMap()), shared legend created side map? legend.position Position shared legend. default: NULL | scope: dynamic & static legend = TRUE, legend placed? Dynamic: One \"topright\", \"topright\", \"bottomleft\" \"bottomright\". Passed position argument leaflet::addLegend(). Static:: One \"top\", \"right\", \"bottom\" \"left\". Passed legend.position argument ggplot2::theme(). legend.title Title legend. default: NULL | scope: dynamic & static default, legend.title = NULL, function attempt provide sensible legend title. legend.title allows users overwrite - example, include units contextual information. dynamic maps, users may wish use HTML tags format title. legend.title.autotext Automatically format title legend? default: TRUE | scope: dynamic & static legend.title.autotext = TRUE, legend.title first run quickTextHTML() (dynamic) openair::quickText() (static). control.collapsed Show layer control collapsed? default: FALSE | scope: dynamic dynamic maps, \"layer control\" interface collapsed? TRUE, users hover icon view options. control.position Position layer control menu default: \"topright\" | scope: dynamic type != NULL, multiple pollutants specified, \"layer control\" interface placed? One \"topleft\", \"topright\", \"bottomleft\" \"bottomright\". Passed position argument leaflet::addLayersControl(). control.autotext Automatically format content layer control menu? default: TRUE | scope: dynamic control.autotext = TRUE, content \"layer control\" interface first run quickTextHTML(). d.icon diameter plot map pixels. default: 200 | scope: dynamic & static affect size individual polar markers. Alternatively, vector form c(width, height) can provided non-circular marker desired. d.fig diameter plots produced using {openair} inches. default: 3.5 | scope: dynamic & static affect resolution markers map. Alternatively, vector form c(width, height) can provided non-circular marker desired. static Produce static map? default: FALSE controls whether dynamic static map produced. former default broadly useful, latter may preferable DOCX PDF outputs (e.g., academic papers). static.nrow Number rows static map. default: NULL | scope: static Controls number rows panels static map multiple pollutants type specified; passed nrow argument ggplot2::facet_wrap(). default, NULL, results roughly square grid panels. progress Show progress bar? default: TRUE | scope: dynamic & static default, progress bar shown visualise function's progress creating individual polar markers. option allows turned , desired. ... Arguments passed openair::percentileRose wd Name wind direction field. smooth wind direction data smoothed using cyclic spline? method method = \"default\" supplied percentiles wind direction calculated. method = \"cpf\" conditional probability function (CPF) plotted single (usually high) percentile level supplied. CPF defined CPF = /ny, number samples wind sector y mixing ratios greater overall percentile concentration, ny total number samples wind sector (see Ashbaugh et al., 1985). angle Default angle “spokes” smooth = FALSE. mean Show mean wind direction line? mean.lty Line type mean line. mean.lwd Line width mean line. mean.col Line colour mean line. fill percentile intervals filled (default) lines drawn (fill = FALSE). angle.scale Sometimes placement scale may interfere interesting feature. user can therefore set angle.scale value 0 360 degrees mitigate problems. example angle.scale = 45 draw scale heading NE direction. auto.text Either TRUE (default) FALSE. TRUE titles axis labels automatically try format pollutant names units properly e.g.  subscripting `2' NO2. key.header Adds additional text/labels scale key. example, passing options key.header = \"header\", key.footer = \"footer1\" adds addition text scale key. arguments passed drawOpenKey via quickText, applying auto.text argument, handle formatting. key.footer see key.footer. key.position Location scale key plotted. Allowed arguments currently include \"top\", \"right\", \"bottom\" \"left\". control Deprecated. Please use type.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/percentileMap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Percentile roses on dynamic and static maps — percentileMap","text":"Either: Dynamic: leaflet object Static: ggplot2 object using ggplot2::coord_sf() coordinates ggspatial basemap","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/percentileMap.html","id":"customisation-of-static-maps-using-ggplot-","dir":"Reference","previous_headings":"","what":"Customisation of static maps using ggplot2","title":"Percentile roses on dynamic and static maps — percentileMap","text":"outputs static directional analysis functions ggplot2 figures, customisation possible using functions ggplot2::theme(), ggplot2::guides() ggplot2::labs(). multiple pollutants specified, subscripting (e.g., \"x\" \"NOx\") achieved using ggtext package. Therefore choose override plot theme, recommended use [ggplot2::theme()] [ggtext::element_markdown()] define strip.text parameter. arguments like limits, percentile breaks defined, legend automatically added figure. Legends can removed using ggplot2::theme(legend.position = \"none\"), customised using ggplot2::guides() either color = ggplot2::guide_colourbar() continuous legends fill = ggplot2::guide_legend() discrete legends.","code":""},{"path":[]},{"path":"https://davidcarslaw.github.io/openairmaps/reference/percentileMap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Percentile roses on dynamic and static maps — percentileMap","text":"","code":"if (FALSE) { # \\dontrun{ percentileMap(polar_data,   pollutant = \"nox\",   provider = \"CartoDB.Voyager\" ) } # }"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::[\\%>\\%][magrittr::pipe] details.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/polarMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Bivariate polar plots on dynamic and static maps — polarMap","title":"Bivariate polar plots on dynamic and static maps — polarMap","text":"polarMap() function creates map using bivariate polar plots markers. number pollutants can specified using pollutant argument, multiple layers markers can created using type. default, maps dynamic can panned, zoomed, otherwise interacted . Using static argument allows static images produced instead.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/polarMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bivariate polar plots on dynamic and static maps — polarMap","text":"","code":"polarMap(   data,   pollutant = NULL,   x = \"ws\",   limits = \"free\",   upper = \"fixed\",   latitude = NULL,   longitude = NULL,   crs = 4326,   type = NULL,   popup = NULL,   label = NULL,   provider = \"OpenStreetMap\",   cols = \"turbo\",   alpha = 1,   key = FALSE,   legend = TRUE,   legend.position = NULL,   legend.title = NULL,   legend.title.autotext = TRUE,   control.collapsed = FALSE,   control.position = \"topright\",   control.autotext = TRUE,   d.icon = 200,   d.fig = 3.5,   static = FALSE,   static.nrow = NULL,   progress = TRUE,   ...,   control = NULL )"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/polarMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bivariate polar plots on dynamic and static maps — polarMap","text":"data Input data table pollutant, wind, geo-spatial information. required | scope: dynamic & static data frame. data frame must contain data plot directional analysis marker, includes wind speed (ws), wind direction (wd), column representing concentration pollutant. addition, data must include decimal latitude longitude (X/Y coordinate used conjunction crs). pollutant Pollutant name(s). required | scope: dynamic & static column name(s) pollutant(s) plot. multiple pollutants specified non-pairwise statistic supplied, type argument longer able used : Dynamic: pollutants can toggled using \"layer control\" menu. Static:: pollutants appear different panel. Multiple pollutants prohibit use type argument non-pairwise statistics. x radial axis variable. default: \"ws\" | scope: dynamic & static column name radial axis variable use openair::polarPlot(). Defaults using wind speed, \"ws\", meteorological variables ambient temperature atmospheric stability may useful. limits Specifier plot colour scale bounds. default: \"free\" | scope: dynamic & static One : \"fixed\" ensures markers use colour scale. \"free\" (default) allows markers use different colour scales. numeric vector form c(lower, upper) used define colour scale. example, limits = c(0, 100) force plot limits span 0-100. upper Specifier polar plot radial axis upper boundary. default: \"fixed\" | scope: dynamic & static One : \"fixed\" (default) ensures markers use radial axis scale. \"free\" allows markers use different radial axis scales. numeric value, used upper limit radial axis scale. latitude, longitude decimal latitude(Y)/longitude(X). default: NULL | scope: dynamic & static Column names representing decimal latitude longitude (Y/X coordinate using different crs). provided, automatically inferred data looking column named \"lat\"/\"latitude\" \"lon\"/\"lng\"/\"long\"/\"longitude\" (case-insensitively). crs coordinate reference system (CRS). default: 4326 | scope: dynamic & static coordinate reference system (CRS) data, passed sf::st_crs(). default EPSG:4326, CRS associated commonly used latitude longitude coordinates. Different coordinate systems can specified using crs (e.g., crs = 27700 British National Grid). Note non-lat/lng coordinate systems re-projected EPSG:4326 plotting map. type method condition data separate plotting. default: NULL | scope: dynamic & static Used splitting input data different groups, passed type argument openair::cutData(). type specified: Dynamic: different data splits can toggled using \"layer control\" menu. Static:: data splits appear different panel. type used multiple pollutant columns provided. popup Content marker popups dynamic maps. default: NULL | scope: dynamic Columns used HTML content marker popups dynamic maps. Popups may useful show information individual sites (e.g., site names, codes, types, etc.). vector column names provided passed buildPopup() using default values. label Content marker hover-dynamic maps. default: NULL | scope: dynamic Column used HTML content hover-labels. Labels useful reasons popups, though typically shorter. provider basemap(s) used. default: \"OpenStreetMap\" | scope: dynamic & static base map(s) used beneath polar markers. provided, default \"OpenStreetMap\"/\"osm\" dynamic static maps. Dynamic: number leaflet::providers. See http://leaflet-extras.github.io/leaflet-providers/preview/ list base maps can used. multiple base maps provided, can toggled using \"layer control\" interface. default, interface use provider names labels, users can define using named vector (e.g., c(\"Default\" = \"OpenStreetMap\", \"Satellite\"   = \"Esri.WorldImagery\")) Static: One rosm::osm.types(). overlap static dynamic providers. example, {ggspatial} uses \"osm\" specify \"OpenStreetMap\". static providers provided dynamic maps vice versa, {openairmaps} attempt substitute correct provider string. cols Colours use plotting. default: \"turbo\" | scope: dynamic & static colours used plotting, passed openair::openColours(). default, \"turbo\", rainbow palette relatively perceptually uniform colours. Read palette https://research.google/blog/turbo--improved-rainbow-colormap--visualization/. alpha Transparency value polar markers. default: 1 | scope: dynamic & static value 0 (fully transparent) 1 (fully opaque). key Draw individual marker legends? default: FALSE | scope: dynamic & static Draw key individual marker? Potentially useful limits = \"free\", limited use otherwise. legend Draw shared legend? default: TRUE | scope: dynamic & static markers share colour scale (e.g., limits != \"free\" polarMap()), shared legend created side map? legend.position Position shared legend. default: NULL | scope: dynamic & static legend = TRUE, legend placed? Dynamic: One \"topright\", \"topright\", \"bottomleft\" \"bottomright\". Passed position argument leaflet::addLegend(). Static:: One \"top\", \"right\", \"bottom\" \"left\". Passed legend.position argument ggplot2::theme(). legend.title Title legend. default: NULL | scope: dynamic & static default, legend.title = NULL, function attempt provide sensible legend title. legend.title allows users overwrite - example, include units contextual information. dynamic maps, users may wish use HTML tags format title. legend.title.autotext Automatically format title legend? default: TRUE | scope: dynamic & static legend.title.autotext = TRUE, legend.title first run quickTextHTML() (dynamic) openair::quickText() (static). control.collapsed Show layer control collapsed? default: FALSE | scope: dynamic dynamic maps, \"layer control\" interface collapsed? TRUE, users hover icon view options. control.position Position layer control menu default: \"topright\" | scope: dynamic type != NULL, multiple pollutants specified, \"layer control\" interface placed? One \"topleft\", \"topright\", \"bottomleft\" \"bottomright\". Passed position argument leaflet::addLayersControl(). control.autotext Automatically format content layer control menu? default: TRUE | scope: dynamic control.autotext = TRUE, content \"layer control\" interface first run quickTextHTML(). d.icon diameter plot map pixels. default: 200 | scope: dynamic & static affect size individual polar markers. Alternatively, vector form c(width, height) can provided non-circular marker desired. d.fig diameter plots produced using {openair} inches. default: 3.5 | scope: dynamic & static affect resolution markers map. Alternatively, vector form c(width, height) can provided non-circular marker desired. static Produce static map? default: FALSE controls whether dynamic static map produced. former default broadly useful, latter may preferable DOCX PDF outputs (e.g., academic papers). static.nrow Number rows static map. default: NULL | scope: static Controls number rows panels static map multiple pollutants type specified; passed nrow argument ggplot2::facet_wrap(). default, NULL, results roughly square grid panels. progress Show progress bar? default: TRUE | scope: dynamic & static default, progress bar shown visualise function's progress creating individual polar markers. option allows turned , desired. ... Arguments passed openair::polarPlot wd Name wind direction field. statistic statistic applied wind speed/direction bin. smoothing involved, colour scale statistics provide indication overall pattern interpreted concentration units e.g. statistic = \"weighted.mean\" bin mean multiplied bin frequency divided total frequency. many cases using polarFreq better. Setting statistic = \"weighted.mean\" can useful provides indication concentration * frequency occurrence highlight wind speed/direction conditions dominate overall mean.Can : “mean” (default), “median”, “max” (maximum), “frequency”. “stdev” (standard deviation), “weighted.mean”. statistic = \"nwr\" Implements Non-parametric Wind Regression approach Henry et al. (2009) uses kernel smoothers. openair implementation identical Gaussian kernels used wind direction speed. smoothing controlled ws_spread wd_spread. statistic = \"cpf\" conditional probability function (CPF) plotted single (usually high) percentile level supplied. CPF defined CPF = /ny, number samples y bin (default wind direction, wind speed interval) mixing ratios greater overall percentile concentration, ny total number samples wind sector (see Ashbaugh et al., 1985). Note percentile intervals can also considered; see percentile details. statistic = \"r\" statistic = \"Pearson\", Pearson correlation coefficient calculated two pollutants. calculation involves weighted Pearson correlation coefficient, weighted Gaussian kernels wind direction radial variable (default wind speed). weight assigned values close wind speed-direction interval. Kernel weighting used ensure data used rather relying potentially small number values wind speed-direction interval. statistic = \"Spearman\", Spearman correlation coefficient calculated two pollutants. calculation involves weighted Spearman correlation coefficient, weighted Gaussian kernels wind direction radial variable (default wind speed). weight assigned values close wind speed-direction interval. Kernel weighting used ensure data used rather relying potentially small number values wind speed-direction interval. \"robust_slope\" another option pair-wise statistics \"quantile.slope\", uses quantile regression estimate slope particular quantile level (see also tau setting quantile level). \"york_slope\" another option pair-wise statistics uses York regression method estimate slope. method uncertainties x y used determination slope. uncertainties provided x_error y_error — see . exclude.missing Setting option TRUE (default) removes points plot far original data. smoothing routines produce predictions points data exist .e. predict. removing points far original data produces plot clear original data lie. set FALSE missing data interpolated. uncertainty uncertainty calculated surface shown? TRUE three plots produced scale showing predicted surface together estimated lower upper uncertainties 95% confidence interval. Calculating uncertainties useful understand whether features real .  example, high wind speeds data greater uncertainty predicted values. uncertainties calculated using GAM weighting done frequency measurements wind speed-direction bin. Note uncertainties calculated type set \"default\". percentile statistic = \"percentile\" percentile used, expressed 0 100. Note percentile value calculated wind speed, wind direction ‘bins’. reason can also useful set min.bin ensure sufficient number points available estimate percentile. See quantile details percentiles calculated. percentile also used Conditional Probability Function (CPF) plots. percentile can length two, case percentile interval considered use CPF. example, percentile = c(90, 100) plot CPF concentrations 90 100th percentiles. Percentile intervals can useful identifying specific sources. addition, percentile can also length 3. third value ‘trim’ value applied. calculating percentile intervals many can cover low values useful information. trim value ensures values greater equal trim * mean value considered percentile intervals calculated. effect extract detail many source signatures. See manual examples. Finally, trim value less zero percentile range interpreted absolute concentration values subsetting carried directly. weights edges plot may data points wind speed-direction interval, situations distort plot concentrations high. weights applies weighting reduce influence. example default single data point exists weighting factor 0.25 two points 0.5. apply weighting use data , use weights = c(1, 1, 1). alternative -weighting points can removed altogether using min.bin. min.bin minimum number points allowed wind speed/wind direction bin.  default 1. value two requires least 2 valid records bin ; bins less 2 valid records set NA. Care taken using value > 1 risk removing real data points. recommended consider data care. Also, polarFreq function can use circumstances. mis.col min.bin > 1 can useful show data removed plots. done shading missing data mis.col. highlight missing data min.bin > 1 choose mis.col = \"transparent\". angle.scale Sometimes placement scale may interfere interesting feature. user can therefore set angle.scale value 0 360 degrees mitigate problems. example angle.scale = 45 draw scale heading NE direction. units units shown polar axis scale. force.positive default TRUE. Sometimes smoothing data steep gradients possible predicted values negative. force.positive = TRUE ensures predictions remain positive. useful several reasons. First, lots missing data interpolation needed can result artefacts predictions far original data. Second, known beforehand data positive, option carries assumption prediction. likely time setting force.positive = FALSE background concentrations first subtracted resulting data legitimately negative. vast majority situations expected user need alter default option. k smoothing parameter used gam function package mgcv. Typically, value around 100 (default) seems suitable resolve important features plot. appropriate choice k problem-dependent; extensive testing polar plots many different problems suggests value k 100 suitable. Setting k higher values tend affect surface predictions much add computation time. Lower values k increase smoothing. Sometimes data plot polarPlot fail. circumstances can worth lowering value k. normalise TRUE concentrations normalised dividing mean value. done fitting smooth surface. option particularly useful one interested patterns concentrations several pollutants different scales e.g. NOx CO. Often useful one pollutant chosen. key.header Adds additional text/labels scale key. example, passing options key.header = \"header\", key.footer = \"footer1\" adds addition text scale key. arguments passed drawOpenKey via quickText, applying auto.text argument, handle formatting. key.footer see key.footer. key.position Location scale key plotted. Allowed arguments currently include \"top\", \"right\", \"bottom\" \"left\". auto.text Either TRUE (default) FALSE. TRUE titles axis labels automatically try format pollutant names units properly e.g.  subscripting `2' NO2. ws_spread value sigma used Gaussian kernel weighting wind speed statistic = \"nwr\" correlation regression statistics used r. Default 0.5. wd_spread value sigma used Gaussian kernel weighting wind direction statistic = \"nwr\" correlation regression statistics used r. Default 4. x_error x error / uncertainty used statistic = \"york_slope\". y_error y error / uncertainty used statistic = \"york_slope\". kernel Type kernel used weighting procedure correlation regression techniques used. \"gaussian\" supported may enhanced future. formula.label pair-wise statistics regression slopes calculated plotted, formula label displayed? formula.label also determine whether concentration information printed statistic = \"cpf\". tau quantile estimated statistic set \"quantile.slope\". Default 0.5 equal median ignored \"quantile.slope\" used. control Deprecated. Please use type.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/polarMap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bivariate polar plots on dynamic and static maps — polarMap","text":"Either: Dynamic: leaflet object Static: ggplot2 object using ggplot2::coord_sf() coordinates ggspatial basemap","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/polarMap.html","id":"customisation-of-static-maps-using-ggplot-","dir":"Reference","previous_headings":"","what":"Customisation of static maps using ggplot2","title":"Bivariate polar plots on dynamic and static maps — polarMap","text":"outputs static directional analysis functions ggplot2 figures, customisation possible using functions ggplot2::theme(), ggplot2::guides() ggplot2::labs(). multiple pollutants specified, subscripting (e.g., \"x\" \"NOx\") achieved using ggtext package. Therefore choose override plot theme, recommended use [ggplot2::theme()] [ggtext::element_markdown()] define strip.text parameter. arguments like limits, percentile breaks defined, legend automatically added figure. Legends can removed using ggplot2::theme(legend.position = \"none\"), customised using ggplot2::guides() either color = ggplot2::guide_colourbar() continuous legends fill = ggplot2::guide_legend() discrete legends.","code":""},{"path":[]},{"path":"https://davidcarslaw.github.io/openairmaps/reference/polarMap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bivariate polar plots on dynamic and static maps — polarMap","text":"","code":"if (FALSE) { # \\dontrun{ polarMap(polar_data,   pollutant = \"nox\",   x = \"ws\",   provider = \"CartoDB.Voyager\" ) } # }"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/polar_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data for polar mapping functions — polar_data","title":"Example data for polar mapping functions — polar_data","text":"polar_data dataset provided example dataset part openairmaps package. dataset contains hourly measurements air pollutant concentrations, location meteorological data.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/polar_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data for polar mapping functions — polar_data","text":"Data frame example data four sites London 2009. date date time measurement nox, no2, pm2.5, pm10 Pollutant concentrations site site name. Useful use popup label arguments openairmaps functions. latitude, longitude Decimal latitude longitude sites. site.type Site type site (either \"Urban Traffic\" \"Urban Background\"). wd Wind direction, degrees North, numeric vector. ws Wind speed, m/s, numeric vector. visibility visibility metres. air_temp Air temperature degrees Celcius.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/polar_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example data for polar mapping functions — polar_data","text":"polar_data compiled data using openair::importAURN() function openair package meteorological data worldmet package.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/polar_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example data for polar mapping functions — polar_data","text":"polar_data supplied openairmaps package example dataset use documented examples.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/polar_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example data for polar mapping functions — polar_data","text":"","code":"# basic structure head(polar_data) #> # A tibble: 6 × 13 #>   date                  nox   no2 pm2.5  pm10 site    lat    lon site_type    wd #>   <dttm>              <dbl> <dbl> <dbl> <dbl> <chr> <dbl>  <dbl> <chr>     <dbl> #> 1 2009-01-01 00:00:00   113    46    42    46 Lond…  51.5 -0.126 Urban Ba…  58.9 #> 2 2009-01-01 01:00:00    40    32    45    49 Lond…  51.5 -0.126 Urban Ba…  74.5 #> 3 2009-01-01 02:00:00    48    36    43    46 Lond…  51.5 -0.126 Urban Ba…  30   #> 4 2009-01-01 03:00:00    36    29    37    NA Lond…  51.5 -0.126 Urban Ba…  45   #> 5 2009-01-01 04:00:00    40    32    36    38 Lond…  51.5 -0.126 Urban Ba…  70   #> 6 2009-01-01 05:00:00    50    36    33    32 Lond…  51.5 -0.126 Urban Ba…  46.6 #> # ℹ 3 more variables: ws <dbl>, visibility <dbl>, air_temp <dbl>"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/pollroseMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Pollution roses on dynamic and static maps — pollroseMap","title":"Pollution roses on dynamic and static maps — pollroseMap","text":"pollroseMap() function creates map using pollution roses markers. number pollutants can specified using pollutant argument, multiple layers markers can created using type. default, maps dynamic can panned, zoomed, otherwise interacted . Using static argument allows static images produced instead.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/pollroseMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pollution roses on dynamic and static maps — pollroseMap","text":"","code":"pollroseMap(   data,   pollutant = NULL,   statistic = \"prop.count\",   breaks = NULL,   latitude = NULL,   longitude = NULL,   crs = 4326,   type = NULL,   popup = NULL,   label = NULL,   provider = \"OpenStreetMap\",   cols = \"turbo\",   alpha = 1,   key = FALSE,   legend = TRUE,   legend.position = NULL,   legend.title = NULL,   legend.title.autotext = TRUE,   control.collapsed = FALSE,   control.position = \"topright\",   control.autotext = TRUE,   d.icon = 200,   d.fig = 3.5,   static = FALSE,   static.nrow = NULL,   progress = TRUE,   ...,   control = NULL )"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/pollroseMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pollution roses on dynamic and static maps — pollroseMap","text":"data Input data table pollutant, wind, geo-spatial information. required | scope: dynamic & static data frame. data frame must contain data plot directional analysis marker, includes wind speed (ws), wind direction (wd), column representing concentration pollutant. addition, data must include decimal latitude longitude (X/Y coordinate used conjunction crs). pollutant Pollutant name(s). required | scope: dynamic & static column name(s) pollutant(s) plot. multiple pollutants specified non-pairwise statistic supplied, type argument longer able used : Dynamic: pollutants can toggled using \"layer control\" menu. Static:: pollutants appear different panel. Multiple pollutants prohibit use type argument non-pairwise statistics. statistic statistic applied data bin plot default: \"prop.mean\" | scope: dynamic & static Options currently include \"prop.count\", \"prop.mean\" \"abs.count\". \"prop.count\" sizes bins according proportion frequency measurements.  Similarly, \"prop.mean\" sizes bins according relative contribution mean. \"abs.count\" provides absolute count measurements bin. breaks Specifier number breaks colour axis. default: NULL | scope: dynamic & static commonly, number break points. specified, marker independently break supplied data approximately 6 sensible break points. breaks specified, markers use break points. Breaks can also used set specific break points. example, argument breaks = c(0, 1, 10, 100) breaks data segments <1, 1-10, 10-100, >100. latitude, longitude decimal latitude(Y)/longitude(X). default: NULL | scope: dynamic & static Column names representing decimal latitude longitude (Y/X coordinate using different crs). provided, automatically inferred data looking column named \"lat\"/\"latitude\" \"lon\"/\"lng\"/\"long\"/\"longitude\" (case-insensitively). crs coordinate reference system (CRS). default: 4326 | scope: dynamic & static coordinate reference system (CRS) data, passed sf::st_crs(). default EPSG:4326, CRS associated commonly used latitude longitude coordinates. Different coordinate systems can specified using crs (e.g., crs = 27700 British National Grid). Note non-lat/lng coordinate systems re-projected EPSG:4326 plotting map. type method condition data separate plotting. default: NULL | scope: dynamic & static Used splitting input data different groups, passed type argument openair::cutData(). type specified: Dynamic: different data splits can toggled using \"layer control\" menu. Static:: data splits appear different panel. type used multiple pollutant columns provided. popup Content marker popups dynamic maps. default: NULL | scope: dynamic Columns used HTML content marker popups dynamic maps. Popups may useful show information individual sites (e.g., site names, codes, types, etc.). vector column names provided passed buildPopup() using default values. label Content marker hover-dynamic maps. default: NULL | scope: dynamic Column used HTML content hover-labels. Labels useful reasons popups, though typically shorter. provider basemap(s) used. default: \"OpenStreetMap\" | scope: dynamic & static base map(s) used beneath polar markers. provided, default \"OpenStreetMap\"/\"osm\" dynamic static maps. Dynamic: number leaflet::providers. See http://leaflet-extras.github.io/leaflet-providers/preview/ list base maps can used. multiple base maps provided, can toggled using \"layer control\" interface. default, interface use provider names labels, users can define using named vector (e.g., c(\"Default\" = \"OpenStreetMap\", \"Satellite\"   = \"Esri.WorldImagery\")) Static: One rosm::osm.types(). overlap static dynamic providers. example, {ggspatial} uses \"osm\" specify \"OpenStreetMap\". static providers provided dynamic maps vice versa, {openairmaps} attempt substitute correct provider string. cols Colours use plotting. default: \"turbo\" | scope: dynamic & static colours used plotting, passed openair::openColours(). default, \"turbo\", rainbow palette relatively perceptually uniform colours. Read palette https://research.google/blog/turbo--improved-rainbow-colormap--visualization/. alpha Transparency value polar markers. default: 1 | scope: dynamic & static value 0 (fully transparent) 1 (fully opaque). key Draw individual marker legends? default: FALSE | scope: dynamic & static Draw key individual marker? Potentially useful limits = \"free\", limited use otherwise. legend Draw shared legend? default: TRUE | scope: dynamic & static markers share colour scale (e.g., limits != \"free\" polarMap()), shared legend created side map? legend.position Position shared legend. default: NULL | scope: dynamic & static legend = TRUE, legend placed? Dynamic: One \"topright\", \"topright\", \"bottomleft\" \"bottomright\". Passed position argument leaflet::addLegend(). Static:: One \"top\", \"right\", \"bottom\" \"left\". Passed legend.position argument ggplot2::theme(). legend.title Title legend. default: NULL | scope: dynamic & static default, legend.title = NULL, function attempt provide sensible legend title. legend.title allows users overwrite - example, include units contextual information. dynamic maps, users may wish use HTML tags format title. legend.title.autotext Automatically format title legend? default: TRUE | scope: dynamic & static legend.title.autotext = TRUE, legend.title first run quickTextHTML() (dynamic) openair::quickText() (static). control.collapsed Show layer control collapsed? default: FALSE | scope: dynamic dynamic maps, \"layer control\" interface collapsed? TRUE, users hover icon view options. control.position Position layer control menu default: \"topright\" | scope: dynamic type != NULL, multiple pollutants specified, \"layer control\" interface placed? One \"topleft\", \"topright\", \"bottomleft\" \"bottomright\". Passed position argument leaflet::addLayersControl(). control.autotext Automatically format content layer control menu? default: TRUE | scope: dynamic control.autotext = TRUE, content \"layer control\" interface first run quickTextHTML(). d.icon diameter plot map pixels. default: 200 | scope: dynamic & static affect size individual polar markers. Alternatively, vector form c(width, height) can provided non-circular marker desired. d.fig diameter plots produced using {openair} inches. default: 3.5 | scope: dynamic & static affect resolution markers map. Alternatively, vector form c(width, height) can provided non-circular marker desired. static Produce static map? default: FALSE controls whether dynamic static map produced. former default broadly useful, latter may preferable DOCX PDF outputs (e.g., academic papers). static.nrow Number rows static map. default: NULL | scope: static Controls number rows panels static map multiple pollutants type specified; passed nrow argument ggplot2::facet_wrap(). default, NULL, results roughly square grid panels. progress Show progress bar? default: TRUE | scope: dynamic & static default, progress bar shown visualise function's progress creating individual polar markers. option allows turned , desired. ... Arguments passed openair::pollutionRose key.footer Adds additional text/labels scale key. See key.header information. key.position Location scale key plotted. Allowed arguments currently include “top”, “right”, “bottom” “left”. paddle Either TRUE FALSE. TRUE plots rose using 'paddle' style spokes. FALSE plots rose using 'wedge' style spokes. seg paddle = TRUE, seg determines width segments. example, seg = 0.5 produce segments 0.5 * angle. normalise TRUE wind direction segment normalised equal one. useful showing concentrations (parameters) contribute wind sector proportion time wind direction low. line showing probability wind directions particular wind sector also shown. control Deprecated. Please use type.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/pollroseMap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pollution roses on dynamic and static maps — pollroseMap","text":"Either: Dynamic: leaflet object Static: ggplot2 object using ggplot2::coord_sf() coordinates ggspatial basemap","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/pollroseMap.html","id":"customisation-of-static-maps-using-ggplot-","dir":"Reference","previous_headings":"","what":"Customisation of static maps using ggplot2","title":"Pollution roses on dynamic and static maps — pollroseMap","text":"outputs static directional analysis functions ggplot2 figures, customisation possible using functions ggplot2::theme(), ggplot2::guides() ggplot2::labs(). multiple pollutants specified, subscripting (e.g., \"x\" \"NOx\") achieved using ggtext package. Therefore choose override plot theme, recommended use [ggplot2::theme()] [ggtext::element_markdown()] define strip.text parameter. arguments like limits, percentile breaks defined, legend automatically added figure. Legends can removed using ggplot2::theme(legend.position = \"none\"), customised using ggplot2::guides() either color = ggplot2::guide_colourbar() continuous legends fill = ggplot2::guide_legend() discrete legends.","code":""},{"path":[]},{"path":"https://davidcarslaw.github.io/openairmaps/reference/pollroseMap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pollution roses on dynamic and static maps — pollroseMap","text":"","code":"if (FALSE) { # \\dontrun{ pollroseMap(polar_data,   pollutant = \"nox\",   statistic = \"prop.count\",   provider = \"CartoDB.Voyager\" ) } # }"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/quickTextHTML.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatic text formatting for openairmaps — quickTextHTML","title":"Automatic text formatting for openairmaps — quickTextHTML","text":"Workhorse function automatically applies routine text formatting common pollutant names may used HTML widgets produced openairmaps.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/quickTextHTML.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatic text formatting for openairmaps — quickTextHTML","text":"","code":"quickTextHTML(text)"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/quickTextHTML.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatic text formatting for openairmaps — quickTextHTML","text":"text character vector. required character vector containing common pollutant names formatted. Commonly, insert super- subscript HTML tags, e.g., \"NO2\" replaced \"NO2\".","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/quickTextHTML.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatic text formatting for openairmaps — quickTextHTML","text":"character vector","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/quickTextHTML.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Automatic text formatting for openairmaps — quickTextHTML","text":"quickTextHTML() routine formatting lookup table. screens supplied character vector text automatically applies formatting recognised character sub-series properly render HTML.","code":""},{"path":[]},{"path":"https://davidcarslaw.github.io/openairmaps/reference/quickTextHTML.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Automatic text formatting for openairmaps — quickTextHTML","text":"Jack Davison.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/quickTextHTML.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatic text formatting for openairmaps — quickTextHTML","text":"","code":"labs <- c(\"no2\", \"o3\", \"so2\") quickTextHTML(labs) #> [1] \"NO<sub>2<\/sub>\" \"O<sub>3<\/sub>\"  \"SO<sub>2<\/sub>\""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/searchNetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"Geographically search the air quality networks made available by openair::importMeta() — searchNetwork","title":"Geographically search the air quality networks made available by openair::importMeta() — searchNetwork","text":"networkMap() visualises entire UK air quality networks, searchNetwork() can subset specific networks find air quality sites near specific site interest (example, location known industrial activity, centroid specific urban area).","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/searchNetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geographically search the air quality networks made available by openair::importMeta() — searchNetwork","text":"","code":"searchNetwork(   lat,   lng,   source = \"aurn\",   year = NULL,   site_type = NULL,   variable = NULL,   max_dist = NULL,   n = NULL,   crs = 4326,   map = TRUE )"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/searchNetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geographically search the air quality networks made available by openair::importMeta() — searchNetwork","text":"lat, lng decimal latitude(Y)/longitude(X). required Values representing decimal latitude longitude (Y/X coordinate using different crs) site interest. source One UK European monitoring networks. default: \"aurn\" One air quality networks data available openair. Available networks include: \"aurn\", UK Automatic Urban Rural Network. \"aqe\", Air Quality England Network. \"saqn\", Scottish Air Quality Network. \"waqn\", Welsh Air Quality Network. \"ni\", Northern Ireland Air Quality Network. \"local\", Locally managed air quality networks England. \"kcl\", King's College London networks. \"europe\", European AirBase/e-reporting data. two additional options provided convenience: \"ukaq\" return metadata networks data imported importUKAQ() (.e., AURN, AQE, SAQN, WAQN, NI, local networks). \"\" import available metadata (.e., \"ukaq\" plus \"kcl\" \"europe\"). year year, range years, filter data. default: NULL default, networkMap() visualises sites currently operational. year allows users show sites open specific year, range years. See openair::importMeta() information. site_type One site types subset site metadata. default: NULL site_type specified, sites type searched . example, site_type = \"urban background\" search urban background sites. variable One variables interest subset site metadata. default: NULL variable specified, sites measuring least one pollutants searched . example, variable = c(\"pm10\", \"co\") search sites measure PM10 /CO. max_dist maximum distance location interest kilometres. default: NULL max_dist specified, sites within max_dist kilometres lat / lng coordinate searched . n maximum number sites return. default: NULL n specified, n sites returned. Note filtering step applied last, site_type, variable, max_dist. crs coordinate reference system (CRS). default: 4326 | scope: dynamic & static coordinate reference system (CRS) data, passed sf::st_crs(). default EPSG:4326, CRS associated commonly used latitude longitude coordinates. Different coordinate systems can specified using crs (e.g., crs = 27700 British National Grid). Note non-lat/lng coordinate systems re-projected EPSG:4326 plotting map. map Return map? default: TRUE TRUE, default, searchNetwork() return leaflet map. FALSE, instead return tibble.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/searchNetwork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geographically search the air quality networks made available by openair::importMeta() — searchNetwork","text":"Either tibble leaflet map.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/searchNetwork.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Geographically search the air quality networks made available by openair::importMeta() — searchNetwork","text":"Data subsetting progresses order arguments given; first source year, site_type variable, max_dist, finally n.","code":""},{"path":[]},{"path":"https://davidcarslaw.github.io/openairmaps/reference/searchNetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geographically search the air quality networks made available by openair::importMeta() — searchNetwork","text":"","code":"if (FALSE) { # \\dontrun{ # get all AURN sites open in 2020 within 20 km of Buckingham Palace palace <- convertPostcode(\"SW1A1AA\") searchNetwork(lat = palace$lat, lng = palace$lng, max_dist = 20, year = 2020) } # }"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/trajLevelMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Trajectory level plots in leaflet — trajLevelMap","title":"Trajectory level plots in leaflet — trajLevelMap","text":"function plots back trajectories leaflet map. function requires data imported using openair::importTraj() function.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/trajLevelMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trajectory level plots in leaflet — trajLevelMap","text":"","code":"trajLevelMap(   data,   longitude = \"lon\",   latitude = \"lat\",   pollutant,   type = NULL,   smooth = FALSE,   statistic = \"frequency\",   percentile = 90,   lon.inc = 1,   lat.inc = 1,   min.bin = 1,   .combine = NA,   sigma = 1.5,   cols = \"turbo\",   alpha = 0.5,   tile.border = NA,   provider = \"OpenStreetMap\",   legend.position = \"topright\",   legend.title = NULL,   legend.title.autotext = TRUE,   control.collapsed = FALSE,   control.position = \"topright\" )"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/trajLevelMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trajectory level plots in leaflet — trajLevelMap","text":"data data frame containing HYSPLIT trajectory, perhaps accessed openair::importTraj(). required data frame containing HYSPLIT model outputs. data obtained using openair::importTraj(). latitude, longitude decimal latitude/longitude. default: \"lat\" / \"lon\" Column names representing decimal latitude longitude. pollutant Pollutant plotted. default trajectory height used. type method condition data separate plotting. default: NULL Used splitting trajectories different groups can selected using \"layer control\" menu. Passed openair::cutData(). smooth trajectory surface smoothed? Defaults FALSE. Note , smooth = TRUE, popup information available. statistic Statistic use trajLevel(). default, function plot trajectory frequencies (statistic = \"frequency\"). alternative way viewing trajectory frequencies, argument method = \"hexbin\" can used. case hexagonal binning trajectory points (.e., point every three hours along back trajectory). plot shows trajectory frequencies uses hexagonal binning. also various ways plotting concentrations. possible set statistic = \"difference\". case trajectories associated concentration greater percentile compared full set trajectories understand differences frequencies origin air masses. comparison made comparing percentage change gridded frequencies. example, plot show top 10\\ tend originate air-mass origins east. statistic = \"pscf\" Potential Source Contribution Function map produced. statistic method interacts percentile. statistic = \"cwt\" concentration weighted trajectories plotted. statistic = \"sqtba\" Simplified Quantitative Transport Bias Analysis undertaken. statistic method interacts .combine sigma. percentile percentile concentration pollutant trajectories compared. lon.inc, lat.inc longitude latitude intervals used binning data. min.bin minimum number unique points grid cell. Counts min.bin set missing. .combine statistic \"SQTBA\" possible combine lots receptor locations derive single map. .combine identifies column differentiates different sites (commonly column named \"site\"). Note individual site maps normalised first dividing mean value. sigma SQTBA approach sigma determines amount back trajectory spread based Gaussian plume equation. Values literature suggest 5.4 km one hour. However, testing suggests lower values reveal source regions effectively introducing much noise. cols colours used plotting, passed openair::openColours(). default, \"turbo\", rainbow palette relatively perceptually uniform colours. Read palette https://research.google/blog/turbo--improved-rainbow-colormap--visualization/. alpha Opacity tiles. Must 0 1. tile.border Colour use border binned tiles. Defaults NA, draws border. provider basemap used. default: \"OpenStreetMap\" single leaflet::providers. See http://leaflet-extras.github.io/leaflet-providers/preview/ list base maps can used. legend.position Position shared legend. default: \"topright\" legend placed? One \"topright\", \"topright\", \"bottomleft\" \"bottomright\". Passed position argument leaflet::addLegend(). NULL defaults \"topright\". legend.title Title legend. default: NULL default, legend.title = NULL, function attempt provide sensible legend title based colour. legend.title allows users overwrite - example, include units contextual information. Users may wish use HTML tags format title. legend.title.autotext Automatically format title legend? default: TRUE legend.title.autotext = TRUE, legend.title first run quickTextHTML(). control.collapsed Show layer control collapsed? default: FALSE \"layer control\" interface collapsed? TRUE, users hover icon view options. control.position Position layer control menu default: \"topright\" \"layer control\" interface placed? One \"topleft\", \"topright\", \"bottomleft\" \"bottomright\". Passed position argument leaflet::addLayersControl().","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/trajLevelMap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trajectory level plots in leaflet — trajLevelMap","text":"leaflet object.","code":""},{"path":[]},{"path":"https://davidcarslaw.github.io/openairmaps/reference/trajLevelMap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trajectory level plots in leaflet — trajLevelMap","text":"","code":"if (FALSE) { # \\dontrun{ trajLevelMap(traj_data, pollutant = \"pm2.5\", statistic = \"pscf\", min.bin = 10) } # }"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/trajLevelMapStatic.html","id":null,"dir":"Reference","previous_headings":"","what":"Trajectory level plots in ggplot2 — trajLevelMapStatic","title":"Trajectory level plots in ggplot2 — trajLevelMapStatic","text":"function plots back trajectories ggplot2 map. function requires data imported using openair::importTraj() function. ggplot2 implementation openair::trajLevel() many arguments, flexible post-hoc changes.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/trajLevelMapStatic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trajectory level plots in ggplot2 — trajLevelMapStatic","text":"","code":"trajLevelMapStatic(   data,   longitude = \"lon\",   latitude = \"lat\",   pollutant,   type = NULL,   smooth = FALSE,   statistic = \"frequency\",   percentile = 90,   lon.inc = 1,   lat.inc = 1,   min.bin = 1,   .combine = NA,   sigma = 1.5,   alpha = 0.5,   tile.border = NA,   xlim = NULL,   ylim = NULL,   crs = sf::st_crs(4326),   map = TRUE,   map.fill = \"grey85\",   map.colour = \"grey75\",   map.alpha = 0.8,   map.lwd = 0.5,   map.lty = 1,   facet = NULL,   ... )"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/trajLevelMapStatic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trajectory level plots in ggplot2 — trajLevelMapStatic","text":"data data frame containing HYSPLIT trajectory, perhaps accessed openair::importTraj(). required data frame containing HYSPLIT model outputs. data obtained using openair::importTraj(). latitude, longitude decimal latitude/longitude. default: \"lat\" / \"lon\" Column names representing decimal latitude longitude. pollutant Pollutant plotted. default trajectory height used. type method condition data separate plotting. default: NULL Used splitting trajectories different groups can selected using \"layer control\" menu. Passed openair::cutData(). smooth trajectory surface smoothed? Defaults FALSE. Note smoothing may cause plot render slower, consider setting crs sf::st_crs(4326) NULL. statistic Statistic use trajLevel(). default, function plot trajectory frequencies (statistic = \"frequency\"). alternative way viewing trajectory frequencies, argument method = \"hexbin\" can used. case hexagonal binning trajectory points (.e., point every three hours along back trajectory). plot shows trajectory frequencies uses hexagonal binning. also various ways plotting concentrations. possible set statistic = \"difference\". case trajectories associated concentration greater percentile compared full set trajectories understand differences frequencies origin air masses. comparison made comparing percentage change gridded frequencies. example, plot show top 10\\ tend originate air-mass origins east. statistic = \"pscf\" Potential Source Contribution Function map produced. statistic method interacts percentile. statistic = \"cwt\" concentration weighted trajectories plotted. statistic = \"sqtba\" Simplified Quantitative Transport Bias Analysis undertaken. statistic method interacts .combine sigma. percentile percentile concentration pollutant trajectories compared. lon.inc, lat.inc longitude latitude intervals used binning data. min.bin minimum number unique points grid cell. Counts min.bin set missing. .combine statistic \"SQTBA\" possible combine lots receptor locations derive single map. .combine identifies column differentiates different sites (commonly column named \"site\"). Note individual site maps normalised first dividing mean value. sigma SQTBA approach sigma determines amount back trajectory spread based Gaussian plume equation. Values literature suggest 5.4 km one hour. However, testing suggests lower values reveal source regions effectively introducing much noise. alpha Opacity tiles. Must 0 1. tile.border Colour use border binned tiles. Defaults NA, draws border. xlim, ylim x- y-limits plot. default: NULL numeric vector length two defining x-/y-limits map, passed ggplot2::coord_sf(). NULL, limits estimated based lat/lon ranges input data. crs coordinate reference system (CRS) data projected plotting. Defaults latitude/longitude (sf::st_crs(4326)). map Draw base map? default: TRUE Draws geometries countries trajectory paths. map.fill Colour use fill polygons base map. default: \"grey85\" See colors() colour options. Alternatively, hexadecimal color code can provided. map.colour Colour use polygon borders base map. default: \"grey75\" See colors() colour options. Alternatively, hexadecimal color code can provided. map.alpha Transparency base map polygons. default: 0.8 Must 0 (fully transparent) 1 (fully opaque). map.lwd Line width base map polygon borders. default: 0.5 numeric value. map.lty Line type base map polygon borders. default: 1 See ggplot2::scale_linetype() common examples. default, 1, draws solid lines. facet Deprecated. Please use type. ... Arguments passed ggplot2::coord_sf expand TRUE, default, adds small expansion factor limits ensure data axes overlap. FALSE, limits taken exactly data xlim/ylim. datum CRS provides datum use generating graticules. label_graticule Character vector indicating graticule lines labeled . Meridians run north-south, letters \"N\" \"S\" indicate labeled north south end points, respectively. Parallels run east-west, letters \"E\" \"W\" indicate labeled east west end points, respectively. Thus, label_graticule = \"SW\" label meridians south end parallels west end, whereas label_graticule = \"EW\" label parallels ends meridians . meridians parallels can general intersect side plot panel, choice label_graticule labels guaranteed reside one particular side plot panel. Also, label_graticule can cause labeling artifacts, particular graticule line coincides edge plot panel. circumstances, label_axes generally yield better results used instead. parameter can used alone combination label_axes. label_axes Character vector named list character values specifying graticule lines (meridians parallels) labeled side plot. Meridians indicated \"E\" (East) parallels \"N\" (North). Default \"--EN\", specifies (clockwise top) labels top, none right, meridians bottom, parallels left. Alternatively, setting specified list(bottom = \"E\", left = \"N\"). parameter can used alone combination label_graticule. lims_method Method specifying scale limits converted limits plot region. effect default_crs = NULL. non-linear CRS (e.g., perspective centered around North pole), available methods yield widely differing results, may want try various options. Methods currently implemented include \"cross\" (default), \"box\", \"orthogonal\", \"geometry_bbox\". method \"cross\", limits along one direction (e.g., longitude) applied midpoint direction (e.g., latitude). method avoids excessively large limits rotated coordinate systems means sometimes limits need expanded little extreme data points included final plot region. contrast, method \"box\", box generated limits along directions, limits projected coordinates chosen entire box visible. method can yield plot regions large. Finally, method \"orthogonal\" applies limits separately along axis, method \"geometry_bbox\" ignores limit information except bounding boxes objects geometry aesthetic. ndiscr Number segments use discretising graticule lines; try increasing number graticules look incorrect. default default coordinate system? FALSE (default), replacing coordinate system another one creates message alerting user coordinate system replaced. TRUE, warning suppressed. clip drawing clipped extent plot panel? setting \"\" (default) means yes, setting \"\" means . cases, default \"\" changed, setting clip = \"\" can cause unexpected results. allows drawing data points anywhere plot, including plot margins. limits set via xlim ylim data points fall outside limits, data points may show places axes, legend, plot title, plot margins.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/trajLevelMapStatic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trajectory level plots in ggplot2 — trajLevelMapStatic","text":"ggplot2 plot","code":""},{"path":[]},{"path":"https://davidcarslaw.github.io/openairmaps/reference/trajMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Trajectory line plots in leaflet — trajMap","title":"Trajectory line plots in leaflet — trajMap","text":"function plots back trajectories leaflet map. function requires data imported using openair::importTraj() function. Options provided colour individual trajectories (e.g., pollutant concentrations) create \"layer control\" menus show/hide different layers.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/trajMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trajectory line plots in leaflet — trajMap","text":"","code":"trajMap(   data,   longitude = \"lon\",   latitude = \"lat\",   colour = NULL,   type = NULL,   cols = \"default\",   alpha = 0.5,   npoints = 12,   provider = \"OpenStreetMap\",   legend.position = \"topright\",   legend.title = NULL,   legend.title.autotext = TRUE,   control.collapsed = FALSE,   control.position = \"topright\",   control = NULL,   ... )"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/trajMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trajectory line plots in leaflet — trajMap","text":"data data frame containing HYSPLIT trajectory, perhaps accessed openair::importTraj(). required data frame containing HYSPLIT model outputs. data obtained using openair::importTraj(). latitude, longitude decimal latitude/longitude. default: \"lat\" / \"lon\" Column names representing decimal latitude longitude. colour Column used colouring trajectory. default: NULL column may numeric, character, factor date(time). commonly pollutant concentration joined (e.g., dplyr::left_join()) trajectory data \"date\". type method condition data separate plotting. default: NULL Used splitting trajectories different groups can selected using \"layer control\" menu. Passed openair::cutData(). cols Colours use plotting. default: \"default\" colours used plotting, passed openair::openColours(). alpha Transparency value trajectories. default: 1 value 0 (fully transparent) 1 (fully opaque). npoints Interval points placed along trajectory paths. default: 12 dot placed every npoints along full trajectory. hourly back trajectories points plotted every npoints hours. helps understand air masses particular times get feel speed air (points closer together correspond slower moving air masses). Defaults 12. provider basemap used. default: \"OpenStreetMap\" single leaflet::providers. See http://leaflet-extras.github.io/leaflet-providers/preview/ list base maps can used. legend.position Position shared legend. default: \"topright\" legend placed? One \"topright\", \"topright\", \"bottomleft\" \"bottomright\". Passed position argument leaflet::addLegend(). NULL defaults \"topright\". legend.title Title legend. default: NULL default, legend.title = NULL, function attempt provide sensible legend title based colour. legend.title allows users overwrite - example, include units contextual information. Users may wish use HTML tags format title. legend.title.autotext Automatically format title legend? default: TRUE legend.title.autotext = TRUE, legend.title first run quickTextHTML(). control.collapsed Show layer control collapsed? default: FALSE \"layer control\" interface collapsed? TRUE, users hover icon view options. control.position Position layer control menu default: \"topright\" \"layer control\" interface placed? One \"topleft\", \"topright\", \"bottomleft\" \"bottomright\". Passed position argument leaflet::addLayersControl(). control Deprecated. Please use type. ... Arguments passed openair::cutData hemisphere Can \"northern\" \"southern\", used split data seasons. n.levels Number quantiles split numeric data . start.day day week type = \"weekday\" start ?  user can change start day supplying integer 0 6. Sunday = 0, Monday = 1, ... example start weekday plots Saturday, choose start.day = 6. .axis logical (TRUE/FALSE), used request shortened cut labels axes. local.tz Used identifying whether date daylight savings time (DST) applied . Examples include local.tz = \"Europe/London\", local.tz = \"America/New_York\" .e. time zones assume DST. https://en.wikipedia.org/wiki/List_of_zoneinfo_time_zones shows time zones valid systems. important original data GMT (UTC) fixed offset GMT. See import openair manual information import data ensure DST applied.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/trajMap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trajectory line plots in leaflet — trajMap","text":"leaflet object.","code":""},{"path":[]},{"path":"https://davidcarslaw.github.io/openairmaps/reference/trajMap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trajectory line plots in leaflet — trajMap","text":"","code":"if (FALSE) { # \\dontrun{ trajMap(traj_data, colour = \"pm10\") } # }"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/trajMapStatic.html","id":null,"dir":"Reference","previous_headings":"","what":"Trajectory line plots in ggplot2 — trajMapStatic","title":"Trajectory line plots in ggplot2 — trajMapStatic","text":"function plots back trajectories using ggplot2. function requires data imported using openair::importTraj(). ggplot2 implementation openair::trajPlot() many arguments, flexible post-hoc changes.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/trajMapStatic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trajectory line plots in ggplot2 — trajMapStatic","text":"","code":"trajMapStatic(   data,   colour = \"height\",   type = NULL,   group = NULL,   size = NULL,   linewidth = size,   longitude = \"lon\",   latitude = \"lat\",   npoints = 12,   xlim = NULL,   ylim = NULL,   crs = sf::st_crs(3812),   origin = TRUE,   map = TRUE,   map.fill = \"grey85\",   map.colour = \"grey75\",   map.alpha = 0.8,   map.lwd = 0.5,   map.lty = 1,   facet = NULL,   ... )"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/trajMapStatic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trajectory line plots in ggplot2 — trajMapStatic","text":"data data frame containing HYSPLIT trajectory, perhaps accessed openair::importTraj(). required data frame containing HYSPLIT model outputs. data obtained using openair::importTraj(). colour Data column map colour trajectories. default: NULL column may numeric, character, factor date(time). commonly pollutant concentration joined (e.g., dplyr::left_join()) trajectory data \"date\". scale can edited fact using ggplot2::scale_color_continuous() similar. type method condition data separate plotting. default: NULL Used splitting trajectories different groups appear different panels. Passed openair::cutData(). group Column use distinguish different trajectory paths. default: NULL default, trajectory paths distinguished using arrival date. group allows additional columns used (e.g., \"receptor\" multiple receptors plotted). size, linewidth Data column map size/width trajectory marker/paths, absolute size value. default: NULL Similar colour argument, defines column map size circular markers width paths. scales can edited fact using ggplot2::scale_size_continuous(), ggplot2::scale_linewidth_continuous(), similar. numeric, value directly provided ggplot2::geom_point(size = ) ggplot2::geom_path(linewidth = ). latitude, longitude decimal latitude/longitude. default: \"lat\" / \"lon\" Column names representing decimal latitude longitude. npoints Interval points placed along trajectory paths. default: 12 dot placed every npoints along full trajectory. hourly back trajectories points plotted every npoints hours. helps understand air masses particular times get feel speed air (points closer together correspond slower moving air masses). Defaults 12. xlim, ylim x- y-limits plot. default: NULL numeric vector length two defining x-/y-limits map, passed ggplot2::coord_sf(). NULL, limits estimated based lat/lon ranges input data. crs coordinate reference system (CRS) data projected plotting. default: sf::st_crs(3812) argument defaults Lambert projection, can take coordinate reference system pass crs argument ggplot2::coord_sf(). Alternatively, crs can set NULL, typically render map quicker may cause countries far equator large areas appear distorted. origin Draw receptor point circle? default: TRUE TRUE, receptor point(s) marked black circles. map Draw base map? default: TRUE Draws geometries countries trajectory paths. map.fill Colour use fill polygons base map. default: \"grey85\" See colors() colour options. Alternatively, hexadecimal color code can provided. map.colour Colour use polygon borders base map. default: \"grey75\" See colors() colour options. Alternatively, hexadecimal color code can provided. map.alpha Transparency base map polygons. default: 0.8 Must 0 (fully transparent) 1 (fully opaque). map.lwd Line width base map polygon borders. default: 0.5 numeric value. map.lty Line type base map polygon borders. default: 1 See ggplot2::scale_linetype() common examples. default, 1, draws solid lines. facet Deprecated. Please use type. ... Arguments passed openair::cutData hemisphere Can \"northern\" \"southern\", used split data seasons. n.levels Number quantiles split numeric data . start.day day week type = \"weekday\" start ?  user can change start day supplying integer 0 6. Sunday = 0, Monday = 1, ... example start weekday plots Saturday, choose start.day = 6. .axis logical (TRUE/FALSE), used request shortened cut labels axes. local.tz Used identifying whether date daylight savings time (DST) applied . Examples include local.tz = \"Europe/London\", local.tz = \"America/New_York\" .e. time zones assume DST. https://en.wikipedia.org/wiki/List_of_zoneinfo_time_zones shows time zones valid systems. important original data GMT (UTC) fixed offset GMT. See import openair manual information import data ensure DST applied.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/trajMapStatic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trajectory line plots in ggplot2 — trajMapStatic","text":"ggplot2 plot","code":""},{"path":[]},{"path":"https://davidcarslaw.github.io/openairmaps/reference/trajMapStatic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trajectory line plots in ggplot2 — trajMapStatic","text":"","code":"if (FALSE) { # \\dontrun{ # colour by height trajMapStatic(traj_data) +   ggplot2::scale_color_gradientn(colors = openair::openColours())  # colour by PM10, log transform scale trajMapStatic(traj_data, colour = \"pm10\") +   ggplot2::scale_color_viridis_c(trans = \"log10\") +   ggplot2::labs(color = openair::quickText(\"PM10\"))  # color by PM2.5, lat/lon projection trajMapStatic(traj_data, colour = \"pm2.5\", crs = sf::st_crs(4326)) +   ggplot2::scale_color_viridis_c(option = \"turbo\") +   ggplot2::labs(color = openair::quickText(\"PM2.5\")) } # }"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/traj_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data for trajectory mapping functions — traj_data","title":"Example data for trajectory mapping functions — traj_data","text":"traj_data dataset provided example dataset part openairmaps package. dataset contains HYSPLIT back trajectory data air mass parcels arriving London 2009. joined air quality pollutant concentrations \"London N. Kensington\" AURN urban background monitoring site.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/traj_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data for trajectory mapping functions — traj_data","text":"","code":"traj_data"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/traj_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example data for trajectory mapping functions — traj_data","text":"data frame 53940 rows 10 variables: date arrival time air-mass receptor receptor number year Trajectory year month Trajectory month day Trajectory day hour Trajectory hour hour.inc Trajectory hour offset arrival date lat Latitude lon Longitude height Height trajectory m pressure Pressure trajectory Pa date2 Date trajectory nox Concentration oxides nitrogen (+ NO2) no2 Concentration nitrogen dioxide (NO2) o3 Concentration ozone (O3) pm10 Concentration particulates (PM10) pm2.5 Concentration fine particulates (PM2.5)","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/traj_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example data for trajectory mapping functions — traj_data","text":"traj_data compiled data using openair::importTraj() function openair package air quality data openair::importAURN() function.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/traj_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example data for trajectory mapping functions — traj_data","text":"traj_data supplied openairmaps package example dataset use documented examples.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/traj_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example data for trajectory mapping functions — traj_data","text":"","code":"# basic structure head(traj_data) #> # A tibble: 6 × 17 #>   date                receptor  year month   day  hour hour.inc   lat    lon #>   <dttm>                 <int> <dbl> <int> <int> <int>    <dbl> <dbl>  <dbl> #> 1 2010-04-15 00:00:00        1  2010     4    15     0        0  51.5 -0.1   #> 2 2010-04-15 00:00:00        1  2010     4    14    23       -1  51.7  0.139 #> 3 2010-04-15 00:00:00        1  2010     4    14    22       -2  51.9  0.378 #> 4 2010-04-15 00:00:00        1  2010     4    14    21       -3  52.1  0.618 #> 5 2010-04-15 00:00:00        1  2010     4    14    20       -4  52.2  0.859 #> 6 2010-04-15 00:00:00        1  2010     4    14    19       -5  52.4  1.10  #> # ℹ 8 more variables: height <dbl>, pressure <dbl>, date2 <dttm>, nox <dbl>, #> #   no2 <dbl>, o3 <dbl>, pm2.5 <dbl>, pm10 <dbl>"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/windroseMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Wind roses on dynamic and static maps — windroseMap","title":"Wind roses on dynamic and static maps — windroseMap","text":"windroseMap() function creates map using wind roses markers. Multiple layers markers can created using type argument. default, maps dynamic can panned, zoomed, otherwise interacted . Using static argument allows static images produced instead.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/windroseMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wind roses on dynamic and static maps — windroseMap","text":"","code":"windroseMap(   data,   ws.int = 2,   breaks = 4,   latitude = NULL,   longitude = NULL,   crs = 4326,   type = NULL,   popup = NULL,   label = NULL,   provider = \"OpenStreetMap\",   cols = \"turbo\",   alpha = 1,   key = FALSE,   legend = TRUE,   legend.position = NULL,   legend.title = NULL,   legend.title.autotext = TRUE,   control.collapsed = FALSE,   control.position = \"topright\",   control.autotext = TRUE,   d.icon = 200,   d.fig = 3.5,   static = FALSE,   static.nrow = NULL,   progress = TRUE,   ...,   control = NULL )"},{"path":"https://davidcarslaw.github.io/openairmaps/reference/windroseMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wind roses on dynamic and static maps — windroseMap","text":"data Input data table wind geo-spatial information. required | scope: dynamic & static data frame. data frame must contain data plot directional analysis marker, includes wind speed (ws) wind direction (wd). addition, data must include decimal latitude longitude (X/Y coordinate used conjunction crs). ws.int wind speed interval colour axis. default: 2 | scope: dynamic & static wind speed interval. Default 2 m/s low met masts low mean wind speeds value 1 0.5 m/s may better. breaks Specifier number breaks colour axis. default: 4 | scope: dynamic & static commonly, number break points wind speed openair::windRose(). ws.int default 2, default breaks, 4, generates break points 2, 4, 6, 8. Breaks can also used set specific break points. example, argument `breaks = c(0, 1, 10, 100)“ breaks data segments <1, 1-10, 10-100, >100. latitude, longitude decimal latitude(Y)/longitude(X). default: NULL | scope: dynamic & static Column names representing decimal latitude longitude (Y/X coordinate using different crs). provided, automatically inferred data looking column named \"lat\"/\"latitude\" \"lon\"/\"lng\"/\"long\"/\"longitude\" (case-insensitively). crs coordinate reference system (CRS). default: 4326 | scope: dynamic & static coordinate reference system (CRS) data, passed sf::st_crs(). default EPSG:4326, CRS associated commonly used latitude longitude coordinates. Different coordinate systems can specified using crs (e.g., crs = 27700 British National Grid). Note non-lat/lng coordinate systems re-projected EPSG:4326 plotting map. type method condition data separate plotting. default: NULL | scope: dynamic & static Used splitting input data different groups, passed type argument openair::cutData(). type specified: Dynamic: different data splits can toggled using \"layer control\" menu. Static:: data splits appear different panel. type used multiple pollutant columns provided. popup Content marker popups dynamic maps. default: NULL | scope: dynamic Columns used HTML content marker popups dynamic maps. Popups may useful show information individual sites (e.g., site names, codes, types, etc.). vector column names provided passed buildPopup() using default values. label Content marker hover-dynamic maps. default: NULL | scope: dynamic Column used HTML content hover-labels. Labels useful reasons popups, though typically shorter. provider basemap(s) used. default: \"OpenStreetMap\" | scope: dynamic & static base map(s) used beneath polar markers. provided, default \"OpenStreetMap\"/\"osm\" dynamic static maps. Dynamic: number leaflet::providers. See http://leaflet-extras.github.io/leaflet-providers/preview/ list base maps can used. multiple base maps provided, can toggled using \"layer control\" interface. default, interface use provider names labels, users can define using named vector (e.g., c(\"Default\" = \"OpenStreetMap\", \"Satellite\"   = \"Esri.WorldImagery\")) Static: One rosm::osm.types(). overlap static dynamic providers. example, {ggspatial} uses \"osm\" specify \"OpenStreetMap\". static providers provided dynamic maps vice versa, {openairmaps} attempt substitute correct provider string. cols Colours use plotting. default: \"turbo\" | scope: dynamic & static colours used plotting, passed openair::openColours(). default, \"turbo\", rainbow palette relatively perceptually uniform colours. Read palette https://research.google/blog/turbo--improved-rainbow-colormap--visualization/. alpha Transparency value polar markers. default: 1 | scope: dynamic & static value 0 (fully transparent) 1 (fully opaque). key Draw individual marker legends? default: FALSE | scope: dynamic & static Draw key individual marker? Potentially useful limits = \"free\", limited use otherwise. legend Draw shared legend? default: TRUE | scope: dynamic & static markers share colour scale (e.g., limits != \"free\" polarMap()), shared legend created side map? legend.position Position shared legend. default: NULL | scope: dynamic & static legend = TRUE, legend placed? Dynamic: One \"topright\", \"topright\", \"bottomleft\" \"bottomright\". Passed position argument leaflet::addLegend(). Static:: One \"top\", \"right\", \"bottom\" \"left\". Passed legend.position argument ggplot2::theme(). legend.title Title legend. default: NULL | scope: dynamic & static default, legend.title = NULL, function attempt provide sensible legend title. legend.title allows users overwrite - example, include units contextual information. dynamic maps, users may wish use HTML tags format title. legend.title.autotext Automatically format title legend? default: TRUE | scope: dynamic & static legend.title.autotext = TRUE, legend.title first run quickTextHTML() (dynamic) openair::quickText() (static). control.collapsed Show layer control collapsed? default: FALSE | scope: dynamic dynamic maps, \"layer control\" interface collapsed? TRUE, users hover icon view options. control.position Position layer control menu default: \"topright\" | scope: dynamic type != NULL, multiple pollutants specified, \"layer control\" interface placed? One \"topleft\", \"topright\", \"bottomleft\" \"bottomright\". Passed position argument leaflet::addLayersControl(). control.autotext Automatically format content layer control menu? default: TRUE | scope: dynamic control.autotext = TRUE, content \"layer control\" interface first run quickTextHTML(). d.icon diameter plot map pixels. default: 200 | scope: dynamic & static affect size individual polar markers. Alternatively, vector form c(width, height) can provided non-circular marker desired. d.fig diameter plots produced using {openair} inches. default: 3.5 | scope: dynamic & static affect resolution markers map. Alternatively, vector form c(width, height) can provided non-circular marker desired. static Produce static map? default: FALSE controls whether dynamic static map produced. former default broadly useful, latter may preferable DOCX PDF outputs (e.g., academic papers). static.nrow Number rows static map. default: NULL | scope: static Controls number rows panels static map multiple pollutants type specified; passed nrow argument ggplot2::facet_wrap(). default, NULL, results roughly square grid panels. progress Show progress bar? default: TRUE | scope: dynamic & static default, progress bar shown visualise function's progress creating individual polar markers. option allows turned , desired. ... Arguments passed openair::windRose ws Name column representing wind speed. wd Name column representing wind direction. ws2,wd2 user can supply second set wind speed wind direction values first can compared. See pollutionRose() details. angle Default angle “spokes” 30. potentially useful angles 45 10. Note width wind speed interval may need adjusting using width. bias.corr angle divide exactly 360 bias introduced frequencies wind direction already supplied rounded nearest 10 degrees, often case. example, angle = 22.5, N, E, S, W include 3 wind sectors angles two. bias correction can made correct problem. simple method according Applequist (2012) used adjust frequencies. grid.line Grid line interval use. NULL, default, assigned based available data range. However, can also forced specific value, e.g. grid.line = 10. grid.line can also list control interval, line type colour. example grid.line = list(value = 10, lty = 5, col = \"purple\"). width paddle = TRUE, adjustment factor width wind speed intervals. example, width = 1.5 make paddle width 1.5 times wider. seg paddle = TRUE, seg determines width segments. example, seg = 0.5 produce segments 0.5 * angle. auto.text Either TRUE (default) FALSE. TRUE titles axis labels automatically try format pollutant names units properly, e.g., subscripting ‘2’ NO2. offset size 'hole' middle plot, expressed percentage polar axis scale, default 10. normalise TRUE wind direction segment normalised equal one. useful showing concentrations (parameters) contribute wind sector proportion time wind direction low. line showing probability wind directions particular wind sector also shown. max.freq Controls scaling used setting maximum value radial limits. useful ensure several plots use radial limits. paddle Either TRUE FALSE. TRUE plots rose using 'paddle' style spokes. FALSE plots rose using 'wedge' style spokes. key.header Adds additional text/labels scale key. example, passing windRose(mydata, key.header = \"ws\") adds addition text scale header. Note: argument passed drawOpenKey() via quickText(), applying auto.text argument, handle formatting. key.footer Adds additional text/labels scale key. See key.header information. key.position Location scale key plotted. Allowed arguments currently include “top”, “right”, “bottom” “left”. dig.lab number significant figures scientific number formatting used break point key labelling. Default 5. include.lowest Logical. FALSE (default), first interval left exclusive right inclusive. TRUE, first interval left right inclusive. Passed include.lowest argument cut(). statistic statistic applied data bin plot. Options currently include “prop.count”, “prop.mean” “abs.count”. default “prop.count” sizes bins according proportion frequency measurements.  Similarly, “prop.mean” sizes bins according relative contribution mean. “abs.count” provides absolute count measurements bin. pollutant Alternative data series sampled instead wind speed. windRose() default NULL equivalent pollutant = \"ws\". Use pollutionRose(). angle.scale scale default shown 315 degree angle. Sometimes placement scale may interfere interesting feature. user can therefore set angle.scale another value (0 360 degrees) mitigate problems. example angle.scale = 45 draw scale heading NE direction. border Border colour shaded areas. Default border. control Deprecated. Please use type.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/windroseMap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wind roses on dynamic and static maps — windroseMap","text":"Either: Dynamic: leaflet object Static: ggplot2 object using ggplot2::coord_sf() coordinates ggspatial basemap","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/reference/windroseMap.html","id":"customisation-of-static-maps-using-ggplot-","dir":"Reference","previous_headings":"","what":"Customisation of static maps using ggplot2","title":"Wind roses on dynamic and static maps — windroseMap","text":"outputs static directional analysis functions ggplot2 figures, customisation possible using functions ggplot2::theme(), ggplot2::guides() ggplot2::labs(). multiple pollutants specified, subscripting (e.g., \"x\" \"NOx\") achieved using ggtext package. Therefore choose override plot theme, recommended use [ggplot2::theme()] [ggtext::element_markdown()] define strip.text parameter. arguments like limits, percentile breaks defined, legend automatically added figure. Legends can removed using ggplot2::theme(legend.position = \"none\"), customised using ggplot2::guides() either color = ggplot2::guide_colourbar() continuous legends fill = ggplot2::guide_legend() discrete legends.","code":""},{"path":[]},{"path":"https://davidcarslaw.github.io/openairmaps/reference/windroseMap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wind roses on dynamic and static maps — windroseMap","text":"","code":"if (FALSE) { # \\dontrun{ windroseMap(polar_data,   provider = \"CartoDB.Voyager\" ) } # }"},{"path":[]},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"new-features-development-version","dir":"Changelog","previous_headings":"","what":"New features","title":"openairmaps (development version)","text":"Pairwise statistics (e.g., \"robust_slope\") now supported polarMap(). (#72) polarMap() family gained progress argument, allowing users switch progress bar . trajMapStatic() gained size linewidth arguments, directly map onto arguments ggplot2::geom_point() ggplot2::geom_path(), respectively. can either column data (like colour), can absolute value (e.g., 2L). Note , default, linewidth takes value size, can set independently.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"bug-fixes-development-version","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"openairmaps (development version)","text":"Vectors greater length 1 passed popup polarMap() argument longer error type = NULL. ... successfully pass openair::cutData() polarMap() trajMap() families functions. default diffMap() colour scale longer appear inverted compared openair::polarDiff(). Fixed issue quickTextHTML() incorrectly format non breaking spaces , e.g., quickTextHTML(\"ug/m3\"). order trajMapStatic() draws points paths tweaked, ensure markers drawn top respective path, rather top paths. buildPopup() now work correctly type provided.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"openairmaps-090","dir":"Changelog","previous_headings":"","what":"openairmaps 0.9.0","title":"openairmaps 0.9.0","text":"CRAN release: 2024-05-19","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"breaking-changes-0-9-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"openairmaps 0.9.0","text":"BREAKING: polarMapStatic() family now powered ggspatial rather ggmap require API key. means ggmap argument removed provider argument added. benefits switch include greater number available base maps (see: rosm::osm.types()) ability simply change extent map axes using ggplot2::coord_sf(). (#52) BREAKING: control facet arguments deprecated favour type functions. arguments eventually removed, version openairmaps users warned away use. brings openairmaps -line openair package. BREAKING: names cols arguments buildPopup() coalesced single columns argument less verbose function usage. BREAKING: collapse.control argument renamed control.collapsed draw.legend argument legend. allow options sit nicely new argument family members - legend.title, legend.title.autotext, legend.position, .","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"new-features-0-9-0","dir":"Changelog","previous_headings":"","what":"New features","title":"openairmaps 0.9.0","text":"polarMapStatic() family functions combined polarMap() family, static maps available accessed using static argument. (#59) polarMapStatic() family therefore deprecated, later removed openairmaps. justification follows: combined functions allows simple, consistent API users (e.g., avoiding needing switch facet control). use static argument allows simple switching dynamic static maps. example, researcher may wish use dynamic maps data exploration, switch static map placement PDF report. Recent developments meant arguments capability functions started align regardless (e.g., provider, crs). Combining functions reduced repetition source code openairmaps, reducing likelihood oversights bugs, allowing rapid development. crs argument added polarMap() polarMapStatic() families searchNetwork(). argument allows users specify data using alternative coordinate system standard longitude/latitude (e.g., British National Grid CRS). Alternate CRS re-projected longitude/latitude plotting expected leaflet / ggspatial. (#56) Users now greater control positions legends layer control menus, titles legends, throughout openairmaps functions, including polarMap() family, trajMap() family, networkMap(). Popups dynamic polarMap() family now near top plot rather centre. obscure less plot marker visible. (#55) quickTextHTML()’s lookup table gained new pollutants units, ignores input case text consistently. Two examples use openairmaps shiny added package. Run shiny::runExample(package = \"openairmaps\") view . (#60)","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"bug-fixes-0-9-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"openairmaps 0.9.0","text":"Legends drawn polarMapStatic() function now render using recent versions ggplot2. addTrajPaths() layerId argument now implemented sensible way ensure geometry unique layerId can therefore interacted shiny context. layerId now base actual layerId built, real layerId form BASE-LN-PN LN line number PN point number. example, layerId = \"traj\", first point first line ID \"traj-1-1\", second point first line ID \"traj-1-2\", first point second line ID \"traj-2-1\", . “illegal” file path characters can now used columns provided type argument polarMap() family. relevant users allow provide custom HTML tags - e.g., formatting superscripts, subscripts, . (#63) colours legend networkMap() now better align actual colours markers, layer control menu control = \"variable\" now presented nicer order clearer labels.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"openairmaps-081","dir":"Changelog","previous_headings":"","what":"openairmaps 0.8.1","title":"openairmaps 0.8.1","text":"CRAN release: 2023-11-03 minor release openairmaps, released mainly fix issue ggmap also adding new functionality polar marker maps.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"breaking-changes-0-8-1","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"openairmaps 0.8.1","text":"BREAKING: arguments addPolarMarkers() rejigged move “data” “pollutant”, owing new use leaflet::getMapData(). (#45) BREAKING: default arguments polarMap()-family functions changed , e.g., NULL \"free\" \"fixed\". (#34) BREAKING: Due changes ggmap, static polar plotting functions now require users provide ggmap object. zoom argument also removed. specifically related partnership Stamen Stadia put stamen tiles behind API. See https://maps.stamen.com/stadia-partnership/ https://github.com/dkahle/ggmap/issues/353 information. (#52)","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"new-features-0-8-1","dir":"Changelog","previous_headings":"","what":"New features","title":"openairmaps 0.8.1","text":"Several “limit” arguments can now take one three options: “fixed” (forces markers share scales), “free” (allows use different scales), numeric vector define scales. (#34) arguments defaults include: polarMap(): upper (fixed); limits (free) annulusMap(): limits (free) freqMap(): breaks (free) percentileMap(): intervals (fixed) Added searchNetwork(), allows users find local air quality monitoring sites specifying target latitude longitude. Function arguments allow site metadata subset (example, site type, pollutants measured, distance target). Added convertPostcode(), converts valid UK postcode latitude/longitude pair. intended used searchNetwork(). “data” argument addPolarMarkers() addTrajPaths() “” “” arguments addPolarDiffMarkers() now default leaflet::getMapData(map). makes use less verbose creating multiple polar plots underlying data, likely common use-case. (#45) networkMap() popups now contain links associated network websites. example, popup London Marylebone Road networkMap(\"aurn\") now contains link https://uk-air.defra.gov.uk/networks/site-info?site_id=MY1. networks supported exception “europe”. (#39) addPolarMarkers() addPolarDiffMarkers() now “options” arguments leaflet::addMarkers(). means , example, polar markers can clustered (https://leafletjs.com/reference.html#marker). (#38) polarMap() family networkMap() provider argument can now take named vector. names used layer control menu, length(provider) > 1. (#42)","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"openairmaps-080","dir":"Changelog","previous_headings":"","what":"openairmaps 0.8.0","title":"openairmaps 0.8.0","text":"CRAN release: 2023-03-31 minor release adding range quality life features, adding two new experimental functions, fixing bugs.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"new-features-0-8-0","dir":"Changelog","previous_headings":"","what":"New features","title":"openairmaps 0.8.0","text":"trajMapStatic() trajLevelMapStatic() added two new experimental functions provide ggplot2 equivalents openair::trajPlot() openair::trajLevel(). (#28) experimental long term place functions uncertain; definitely need ggplot2 incarnation trajectory plotting functions, whether sit openair, {ggopenair} openairmaps named clear. control facet arguments polar marker mapping functions (static interactive) trajectory mapping functions now passed openair::cutData(). popup argument interactive polar marker mapping functions can now take vector column names. one column provided, automatically passed buildPopup() using default values. trajLevelMap() now control argument, maps directly onto type argument openair::trajLevel(). Like control arguments elsewhere openairmaps, creates “layer control” menu. networkMap() now uses different coloured markers different networks. one network specified, draw.legend set TRUE, legend also drawn quick identification different data sources. (#30) Deprecations now managed lifecycle package. currently applies type argument.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"bug-fixes-0-8-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"openairmaps 0.8.0","text":"Fixed issues multiple addPolarMarkers() chained together show plot. Fixed issue ... pollutant weren’t passed addPolarMarkers(). (#27) Fixed issue trajMap() caused recent updates dplyr forcats. Fixed issue polarMapStatic() others turn factor facet levels characters. Specifically, meant , example, months year alphabetical order. Now factor levels, including resulting pass cutData(), now honoured facet argument. (#31) Fixed issue polarMapStatic() others error trying draw legend.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"openairmaps-070","dir":"Changelog","previous_headings":"","what":"openairmaps 0.7.0","title":"openairmaps 0.7.0","text":"CRAN release: 2023-02-09 minor release containing several important new features expand scope package. also comes several minor breaking changes improve consistency within openairmaps openair.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"breaking-changes-0-7-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"openairmaps 0.7.0","text":"BREAKING: fig.width, fig.height, iconHeight iconWidth arguments replaced d.fig d.icon. two main justifications behind : ensures consistency across openairmaps, making easier switch static HTML map types. Polar markers almost always going circular (.e., width = height) one argument streamline things. users wish non-circular markers, vector length two form c(width, height) provide functionality. BREAKING: arguments addPolarMarkers() put sensible order, leading data, pollutant fun. BREAKING: date argument networkMap() replaced year. (#26)","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"new-features-0-7-0","dir":"Changelog","previous_headings":"","what":"New features","title":"openairmaps 0.7.0","text":"Added “static” equivalents polar marker maps written ggplot2. interactive HTML maps preferred, static equivalents may appropriate , e.g., academic publications. (#19) ggplot2 functions can identified “Static” appended function name. example, polarMap() leaflet polar plot map, whereas polarMapStatic() ggplot2 equivalent. Currently, “static” versions trajectory maps served openair::trajPlot() openair::trajLevel(), may space future ggmap equivalents openairmaps. Added diffMap() diffMapStatic() openair::polarDiff() polarMap() polarMapStatic() openair::polarPlot() (#17). Also added addPolarDiffMarkers(), equivalent addPolarMarkers(). (#25) Added alpha argument directional analysis polar mapping functions, just polarMap(). (#14) Fixed alpha work Windows MacOS forcing use “cairo” device save plots. (#14) Polar marker maps addPolarMarkers() now show progress bar creating markers takes seconds (commonly polarMap() annulusMap(), particularly multiple pollutants/control groups). networkMap() can now pass new year option importMeta().","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"openairmaps-061","dir":"Changelog","previous_headings":"","what":"openairmaps 0.6.1","title":"openairmaps 0.6.1","text":"CRAN release: 2023-01-09 patch release primarily fix bugs openairmaps, implement new default colour scheme recent openair update.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"new-features-0-6-1","dir":"Changelog","previous_headings":"","what":"New features","title":"openairmaps 0.6.1","text":"Functions now use Google’s “turbo” colour palette rather “jet” default. palette advantages using “jet” can read https://ai.googleblog.com/2019/08/turbo-improved-rainbow-colormap-.html.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"bug-fixes-0-6-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"openairmaps 0.6.1","text":"Fixed issue polar marker maps (e.g., polarMap()) generic addPolarMarkers() function lat/lon info Southern Hemisphere misalign markers. Hat tip Deanna Tuxford James noticing issue. (#18) Fixed issue networkMap() control = \"variable\" fail show pollutants.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"openairmaps-060","dir":"Changelog","previous_headings":"","what":"openairmaps 0.6.0","title":"openairmaps 0.6.0","text":"CRAN release: 2022-11-28 minor release, mainly focusing enhancing ability polar markers shared colour scales, also incorporating new features network visualisation.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"new-features-0-6-0","dir":"Changelog","previous_headings":"","what":"New features","title":"openairmaps 0.6.0","text":"directional analysis maps can now limits provided (can “limits”, “breaks”, “percentiles”, etc., depending function). always possible ..., now explicitly listed option. (#12) limits defined directional analysis function, shared legend now drawn top-right map. functionality can disabled setting draw.legend FALSE. (#12) Added buildPopup() function, allows users easily construct HTML popups use “popup” argument directional analysis maps (leaflet maps widely). default options fig.width fig.height now 3.5 rather 4. appears remove visual artefacts makes axis labels legible. networkMap() now supports multiple sources. example, using source = c(\"aurn\", \"saqn\") show AURN SAQN one map. may useful users interested air quality specific region UK (e.g., users may wish locate AURN, AQE locally managed sites near given urban centre). (#16) networkMap() now supports source = \"local\". Multiple basemap providers can now used networkMap(). networkMap(), trajMap() polar directional analysis maps gained collapse.control argument, controls whether control menu starts collapsed . defaults FALSE, means control menu collapsed. documentation improved; function parameters consistent functions arguments passed openair via ... now explicitly listed.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"bug-fixes-0-6-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"openairmaps 0.6.0","text":"“alpha” option removed directional analysis functions except polarMap() ever worked polarMap().","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"openairmaps-051","dir":"Changelog","previous_headings":"","what":"openairmaps 0.5.1","title":"openairmaps 0.5.1","text":"CRAN release: 2022-10-20 patch release designed fix major bug v0.5.0.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"bug-fixes-0-5-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"openairmaps 0.5.1","text":"Fixed issue causing markers duplicated pollutant information missing certain sites.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"openairmaps-050","dir":"Changelog","previous_headings":"","what":"openairmaps 0.5.0","title":"openairmaps 0.5.0","text":"CRAN release: 2022-10-19 minor release centred around addition control argument, allows arbitrary columns used “layer control” menus.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"breaking-changes-0-5-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"openairmaps 0.5.0","text":"functions now use latitude longitude distinguish site types. Therefore, “type” now deprecated. Maps using old system still render, popups displayed. users, restore previous site labels simply rewrite type = \"site\" popup = \"site\". (#10) default values “pollutant” removed. users relying default update code explicitly state pollutant = \"nox\".","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"new-features-0-5-0","dir":"Changelog","previous_headings":"","what":"New features","title":"openairmaps 0.5.0","text":"functions now possess “control” argument, allows users create “layer control” menu arbitrary column. Appropriate columns may produced using openair::cutData(), openair::splitByDate(), user-defined dplyr::case_when()/dplyr::if_else() column transformation. (#9) functions now possess “popup” “label” arguments, control pop-hover-labels, respectively. allows users define popup label column, even non-unique ones. example, multiple sites can labelled identical site types. (#10) functions now try guess latitude/longitude column provided, similar leaflet. (#10) Updated many error messages warnings use cli broadly descriptive.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"bug-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"openairmaps 0.5.0","text":"trajMap() can now coloured date. Fixed issue trajMap() cause user-defined colours work.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"openairmaps-043","dir":"Changelog","previous_headings":"","what":"openairmaps 0.4.3","title":"openairmaps 0.4.3","text":"CRAN release: 2022-09-13 patch release adding small number refinements.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"breaking-changes-0-4-3","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"openairmaps 0.4.3","text":"polar_data column names changed “latitude” “longitude” “lat” “lon” reflect defaults polarMap() family. trajMap() trajLevelMap() now use argument names “latitude” “longitude” match polarMap() family.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"new-features-0-4-3","dir":"Changelog","previous_headings":"","what":"New features","title":"openairmaps 0.4.3","text":"trajLevelMap() now contains lat.inc lon.inc arguments.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"openairmaps-042","dir":"Changelog","previous_headings":"","what":"openairmaps 0.4.2","title":"openairmaps 0.4.2","text":"patch release fix bug trajLevelMap().","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"bug-fixes-0-4-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"openairmaps 0.4.2","text":"trajLevelMap() now works statistic = \"frequency\" without “pollutant”.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"openairmaps-041","dir":"Changelog","previous_headings":"","what":"openairmaps 0.4.1","title":"openairmaps 0.4.1","text":"first CRAN release openairmaps.","code":""},{"path":"https://davidcarslaw.github.io/openairmaps/news/index.html","id":"features-0-4-1","dir":"Changelog","previous_headings":"","what":"Features","title":"openairmaps 0.4.1","text":"currently three streams functionality openairmaps: networkMap() visualises openair::importMeta() networks. polarMap() family allow openair directional analysis plots used leaflet markers. trajMap() family leaflet equivalents openair::trajPlot() openair::trajMap(). two main classes functions: *Map() functions easy--use functions create leaflet maps ground-. similar openair functions. add*() functions flexible allow users add layers existing leaflet maps. designed similar leaflet “add” functions like addMarkers().","code":""}]
